{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/github.png","path":"images/github.png","modified":0,"renderable":0},{"_id":"source/video/poster.png","path":"video/poster.png","modified":0,"renderable":0},{"_id":"themes/documentation/source/css/docs.scss","path":"css/docs.scss","modified":0,"renderable":1},{"_id":"source/video/koa-cola-dev.mp4","path":"video/koa-cola-dev.mp4","modified":0,"renderable":0}],"Cache":[{"_id":"source/api-controllers.md","hash":"233140e31335f2b5b8cf5f7b2e19030d155bbf82","modified":1503036631000},{"_id":"source/api-schemas.md","hash":"705b1ca92c5587802d9bac73cb2a8e3b006e5a96","modified":1502970793000},{"_id":"source/api-responses.md","hash":"79ac351ccefb46507dba0e17933beb69d315e7cc","modified":1502970793000},{"_id":"source/api-models.md","hash":"fcd407115b9caa8b4e0ce369056aeb4cdf717311","modified":1503036630000},{"_id":"source/api.md","hash":"a744ffc8ceca7656f673c2ce2023e9b2fcec7d49","modified":1502970793000},{"_id":"source/cli.md","hash":"d394d4bae53c0aaf95c5d20232a8ac3c3cbabef4","modified":1502970793000},{"_id":"source/compare-next.md","hash":"45e0cf7594155e6f43be11b6b0ca9fbac020acc6","modified":1503036628000},{"_id":"source/config.md","hash":"b91e60908d1ff58da90a32ae57ab2369bdf689d2","modified":1502970793000},{"_id":"source/d-mvc.md","hash":"693379c7c3c6166e11f4e7fc18766b62f9db11eb","modified":1503036625000},{"_id":"source/index.md","hash":"57b247d23a16d23ba8f906b41e96f69280b85913","modified":1502970793000},{"_id":"source/installation.md","hash":"83389c2a55e888cfd0aa637a7d09a8421288a955","modified":1502970793000},{"_id":"source/public.md","hash":"4eb9a294e008b576c66ef6dab568c2a380d549d6","modified":1502970793000},{"_id":"source/ssr.md","hash":"195e96ab69e53c15f759598a3fdd0a83bbd4a8df","modified":1502970793000},{"_id":"source/tip1-react-init.md","hash":"e53499a88b4f08bf94081109e779fe5213d4b02e","modified":1503043909000},{"_id":"source/tip4-cluster.md","hash":"d8e16f31de9e99976f6ec5b637d410c87c3bbf3b","modified":1502970793000},{"_id":"source/tip2-redux.md","hash":"09184f041c8242d926b5e2c8a1f80238a6fb60cf","modified":1503036623000},{"_id":"source/tip3-inject-global.md","hash":"e3ba763a0a7896ff1c42bbcfd1632f1dbf28f502","modified":1503036657000},{"_id":"source/tip5-debug.md","hash":"3c05129d095577eab4229ba7df25a8c07ec3d3f9","modified":1502970793000},{"_id":"source/tip6-compile.md","hash":"f9b6b25af2b81f65e4cc10e2e6216494f9b4719c","modified":1503255447000},{"_id":"source/universal.md","hash":"322a65d9867ba1978489feafb13989a01d3ef99e","modified":1503036620000},{"_id":"source/views-app.md","hash":"26890e3976e1a2126c7cbacd6460da4f2f95b656","modified":1503036619000},{"_id":"source/views-components.md","hash":"cb49fcb0fab8579c41d354eaec0e4cffeed4a7a7","modified":1502970793000},{"_id":"source/views-pages.md","hash":"c092569093e338b1b380a57212c7e6b406fa2bbc","modified":1503036617000},{"_id":"source/views.md","hash":"83fbabf00697d6ad7b8de3259ca5fb143c1259a1","modified":1502970793000},{"_id":"themes/documentation/_config.yml","hash":"670d6f859f7f380466281ae4ca7028ad29469a72","modified":1502970793000},{"_id":"source/_data/nav.yml","hash":"5cb0d6dd6e5ddf619ca4876f39aad9d86d7f9f3a","modified":1502970793000},{"_id":"source/css/github-markdown.css","hash":"018da55e2c6c85aa8550a51d4cfb790bfa2a729b","modified":1502970793000},{"_id":"source/images/github.png","hash":"fabe53eb72f9b6d3d47cd95aff31ffc45c2fdbf8","modified":1502970793000},{"_id":"source/video/poster.png","hash":"47191c937f2b10ec740fdfde851991d599da1124","modified":1502970793000},{"_id":"themes/documentation/layout/default.swig","hash":"ad0fe629b20fcccab53b7706960c0d612498208f","modified":1502970793000},{"_id":"themes/documentation/source/css/_menu.scss","hash":"a72ba17db23e59dc980e831df2246c015605e92a","modified":1502970793000},{"_id":"themes/documentation/source/css/_typography.scss","hash":"06ac832e3ae656ea47b818e7dc6524fcad71b241","modified":1502970793000},{"_id":"themes/documentation/source/css/_code.scss","hash":"944676c08a813c90778ce48a3daf23fb6f18ceea","modified":1502970793000},{"_id":"themes/documentation/source/css/_content.scss","hash":"fe27f2e6570b1d109ed84e4f8c7f87344e5c9eba","modified":1502970793000},{"_id":"themes/documentation/source/css/docs.scss","hash":"c4185a629de88bd667ce25adaea31b5b1dca19c9","modified":1502970793000},{"_id":"source/video/koa-cola-dev.mp4","hash":"c9c8d3e79b5791ee2d04aae3bd3d59a2372e7791","modified":1502970793000},{"_id":"public/css/github-markdown.css","hash":"018da55e2c6c85aa8550a51d4cfb790bfa2a729b","modified":1503037275016},{"_id":"public/api-controllers.html","hash":"0a689b4999718583118a755becf595c6172a9f6d","modified":1503037275037},{"_id":"public/api-schemas.html","hash":"de0707d4fd21199cd7ee6a8288f1521c2baee281","modified":1503037275037},{"_id":"public/api-responses.html","hash":"ed542b0ed42b12eb43777e48a365480bf1986564","modified":1503037275037},{"_id":"public/api-models.html","hash":"1a49dc683823760417ee546addd5584c91a3abca","modified":1503037275037},{"_id":"public/api.html","hash":"e9b008515f6f596ce92a5d29be76e0faad53bdf4","modified":1503037275037},{"_id":"public/cli.html","hash":"43b4b914fddfc2e2de6d30510b6abd5bbd85b4d7","modified":1503037275037},{"_id":"public/compare-next.html","hash":"239d89cb14a79a211f0710aa6e9b33183a7df532","modified":1503037275038},{"_id":"public/config.html","hash":"1ad2f2e09c5e069f18f7cb8260cb552b012371d4","modified":1503037275038},{"_id":"public/index.html","hash":"60cce49b32a924d09395f90d1bd0a5174fd5d34a","modified":1503037275038},{"_id":"public/installation.html","hash":"905316adfd188ebea7b06145e915386a0ec35f80","modified":1503037275038},{"_id":"public/public.html","hash":"059806e7cec2150f372aeac67d6ccf3d4c234c96","modified":1503037275038},{"_id":"public/ssr.html","hash":"5d87a60144863d4c5d8354aee7fff3d74fa59489","modified":1503037275038},{"_id":"public/tip1-react-init.html","hash":"712858fd58025c8b284f49df694989df144ca1a8","modified":1503255640270},{"_id":"public/tip4-cluster.html","hash":"d670bc3f8b4377e5bea635293534b15b6236ad63","modified":1503037275039},{"_id":"public/tip2-redux.html","hash":"6316974c5a01c957090022bd738e5d5f6276ae47","modified":1503037275039},{"_id":"public/tip3-inject-global.html","hash":"0b76cc6fdcffd0c1e2936df7d0c0368dd0d1f3bc","modified":1503037275039},{"_id":"public/tip5-debug.html","hash":"753433db00769361959889f97e962336f86071fc","modified":1503037275039},{"_id":"public/tip6-compile.html","hash":"3c5fbaf801e17f3cfa92327c8af094d224709d3f","modified":1503255640270},{"_id":"public/views-app.html","hash":"e6a5fbbc85f67c8b36815a6f688eb9273b869ace","modified":1503037275039},{"_id":"public/views-components.html","hash":"01dfde2ebc9381d123fb69d5660fa0e9a04b1429","modified":1503037275039},{"_id":"public/views-pages.html","hash":"dac8cfbcd1bbb9489ce7224d1aa4c0f7c3642773","modified":1503037275039},{"_id":"public/views.html","hash":"3b584f7c92a9c9aba434c8721ce1d2e0ba0a79a8","modified":1503037275040},{"_id":"public/d-mvc.html","hash":"9f02484a613bf838dca3b095dfb6886ab3d3522c","modified":1503037275040},{"_id":"public/universal.html","hash":"66e81e75873e1e94f4ba9db51982fc72d2a3d311","modified":1503037275040},{"_id":"public/images/github.png","hash":"fabe53eb72f9b6d3d47cd95aff31ffc45c2fdbf8","modified":1503037275044},{"_id":"public/video/poster.png","hash":"47191c937f2b10ec740fdfde851991d599da1124","modified":1503037275044},{"_id":"public/css/docs.scss","hash":"c4185a629de88bd667ce25adaea31b5b1dca19c9","modified":1503037275044},{"_id":"public/video/koa-cola-dev.mp4","hash":"c9c8d3e79b5791ee2d04aae3bd3d59a2372e7791","modified":1503037275061}],"Category":[],"Data":[{"_id":"nav","data":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}],"Page":[{"layout":"default","id":"api-controllers","title":"controllers","next":"api-models.html","_content":"\ncontroller类保存的目录，controller类必须是基于`require('koa-cola/dist/client').Decorators.controller`的装饰器（decorator），使用装饰器可以定义路由router和view等信息，你可以根据不同的业务需求设计不同的controller。\n\n## 提供api接口的controller\n\n```javascript\nconst { Controller, Get, Post, Body, Ctx,  Response } = require('koa-cola/dist/client').Decorators.controller;\n\n@Controller('')\nexport default class {\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n\n  \n  @Post('/todo/save')\n  async saveTodo(@Body() body) {\n    return await app.models.todo.save(body);\n  }\n}\n```\n\n## page view的controller\n```javascript\nconst { Controller, Get, Post, Body, Ctx,  Response } = require('koa-cola/dist/client').Decorators.controller;\n\n@Controller('')\nexport default class {\n  @Get('/index')\n  async index() {\n    return {\n        list : await app.models.todo.find({})\n    }\n  }\n}\n```\n\nindex的page类(在目录views/pages下)\n\n```javascript\nimport * as React from 'react';\nfunction Index({ctrl : {list}}){\n  return <div>\n    <ul>\n      {\n          list.map(item => <li>{item.name}</li>)\n      }\n    </ul>\n  </div>\n}\n```\n\nkoa-cola提供一些比较好用的装饰器。\n\n### 可以通过Response装饰器返回固定数据格式\n```javascript\n  /**\n  返回格式:\n  [todoItem, ...]\n  */\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\n使用Response装饰器\n```javascript\n  const Ok = function Ok(ctx, data){\n      ctx.status = 200;\n      if(data){\n          ctx.body = {\n              code : 200,\n              result : data\n          };\n      }\n  }\n  /**\n  返回格式:\n  {\n      code : 200,\n      result : [todoItem, ...]\n  }\n  */\n  @Get('/todo/list')\n  @Response(Ok)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\n### 使用Use装饰器验证请求\n\n```javascript\n function isLogin(ctx, next){\n    if(ctx.state.user){\n        await next();\n    }else{\n        ctx.throw(401);\n    }\n}\n\n...\n  // 验证用户是否登录，如果没有则返回401\n  @Get('/todo/list')\n  @Response(Ok)\n  @Use(isLogin)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n...\n```","source":"api-controllers.md","raw":"---\nlayout: default\nid: api-controllers\ntitle: controllers\nnext: api-models.html\n---\n\ncontroller类保存的目录，controller类必须是基于`require('koa-cola/dist/client').Decorators.controller`的装饰器（decorator），使用装饰器可以定义路由router和view等信息，你可以根据不同的业务需求设计不同的controller。\n\n## 提供api接口的controller\n\n```javascript\nconst { Controller, Get, Post, Body, Ctx,  Response } = require('koa-cola/dist/client').Decorators.controller;\n\n@Controller('')\nexport default class {\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n\n  \n  @Post('/todo/save')\n  async saveTodo(@Body() body) {\n    return await app.models.todo.save(body);\n  }\n}\n```\n\n## page view的controller\n```javascript\nconst { Controller, Get, Post, Body, Ctx,  Response } = require('koa-cola/dist/client').Decorators.controller;\n\n@Controller('')\nexport default class {\n  @Get('/index')\n  async index() {\n    return {\n        list : await app.models.todo.find({})\n    }\n  }\n}\n```\n\nindex的page类(在目录views/pages下)\n\n```javascript\nimport * as React from 'react';\nfunction Index({ctrl : {list}}){\n  return <div>\n    <ul>\n      {\n          list.map(item => <li>{item.name}</li>)\n      }\n    </ul>\n  </div>\n}\n```\n\nkoa-cola提供一些比较好用的装饰器。\n\n### 可以通过Response装饰器返回固定数据格式\n```javascript\n  /**\n  返回格式:\n  [todoItem, ...]\n  */\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\n使用Response装饰器\n```javascript\n  const Ok = function Ok(ctx, data){\n      ctx.status = 200;\n      if(data){\n          ctx.body = {\n              code : 200,\n              result : data\n          };\n      }\n  }\n  /**\n  返回格式:\n  {\n      code : 200,\n      result : [todoItem, ...]\n  }\n  */\n  @Get('/todo/list')\n  @Response(Ok)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\n### 使用Use装饰器验证请求\n\n```javascript\n function isLogin(ctx, next){\n    if(ctx.state.user){\n        await next();\n    }else{\n        ctx.throw(401);\n    }\n}\n\n...\n  // 验证用户是否登录，如果没有则返回401\n  @Get('/todo/list')\n  @Response(Ok)\n  @Use(isLogin)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n...\n```","date":"2017-08-18T06:10:31.000Z","updated":"2017-08-18T06:10:31.000Z","path":"api-controllers.html","comments":1,"_id":"cj6hhl3g300002mvgo8lx1ann","content":"<p>controller类保存的目录，controller类必须是基于<code>require('koa-cola/dist/client').Decorators.controller</code>的装饰器（decorator），使用装饰器可以定义路由router和view等信息，你可以根据不同的业务需求设计不同的controller。</p>\n<h2>提供api接口的controller</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Post, Body, Ctx,  Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.controller;</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">  @Post(<span class=\"string\">'/todo/save'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> saveTodo(@Body() body) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.save(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2>page view的controller</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Post, Body, Ctx,  Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.controller;</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  @Get(<span class=\"string\">'/index'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> index() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        list : <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>index的page类(在目录views/pages下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Index</span>(<span class=\"params\">&#123;ctrl : &#123;list&#125;&#125;</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">          list.map(item =&gt; &lt;li&gt;&#123;item.name&#125;&lt;/li&gt;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola提供一些比较好用的装饰器。</p>\n<h3>可以通过Response装饰器返回固定数据格式</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">返回格式:</span></div><div class=\"line\"><span class=\"comment\">[todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用Response装饰器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Ok = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">    ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(data)&#123;</div><div class=\"line\">        ctx.body = &#123;</div><div class=\"line\">            code : <span class=\"number\">200</span>,</div><div class=\"line\">            result : data</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">返回格式:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    code : 200,</span></div><div class=\"line\"><span class=\"comment\">    result : [todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">@Response(Ok)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>使用Use装饰器验证请求</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\">ctx, next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ctx.state.user)&#123;</div><div class=\"line\">        <span class=\"keyword\">await</span> next();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        ctx.throw(<span class=\"number\">401</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">// 验证用户是否登录，如果没有则返回401</span></div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  @Response(Ok)</div><div class=\"line\">  @Use(isLogin)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>controller类保存的目录，controller类必须是基于<code>require('koa-cola/dist/client').Decorators.controller</code>的装饰器（decorator），使用装饰器可以定义路由router和view等信息，你可以根据不同的业务需求设计不同的controller。</p>\n<h2>提供api接口的controller</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Post, Body, Ctx,  Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.controller;</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">  @Post(<span class=\"string\">'/todo/save'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> saveTodo(@Body() body) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.save(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2>page view的controller</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Post, Body, Ctx,  Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.controller;</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  @Get(<span class=\"string\">'/index'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> index() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        list : <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>index的page类(在目录views/pages下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Index</span>(<span class=\"params\">&#123;ctrl : &#123;list&#125;&#125;</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">          list.map(item =&gt; &lt;li&gt;&#123;item.name&#125;&lt;/li&gt;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola提供一些比较好用的装饰器。</p>\n<h3>可以通过Response装饰器返回固定数据格式</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">返回格式:</span></div><div class=\"line\"><span class=\"comment\">[todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用Response装饰器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Ok = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">    ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(data)&#123;</div><div class=\"line\">        ctx.body = &#123;</div><div class=\"line\">            code : <span class=\"number\">200</span>,</div><div class=\"line\">            result : data</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">返回格式:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    code : 200,</span></div><div class=\"line\"><span class=\"comment\">    result : [todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">@Response(Ok)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>使用Use装饰器验证请求</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\">ctx, next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ctx.state.user)&#123;</div><div class=\"line\">        <span class=\"keyword\">await</span> next();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        ctx.throw(<span class=\"number\">401</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">// 验证用户是否登录，如果没有则返回401</span></div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  @Response(Ok)</div><div class=\"line\">  @Use(isLogin)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>"},{"layout":"default","id":"api-schemas","title":"schemas","prev":"api-models.html","next":"api-responses.html","_content":"\n无论是使用mongodb还是其他数据库，不可避免需要定义数据的schema，使用单独定义schema的方式，好处是可以前后端都可以使用。\n\n启动app后服务器端就可以使用app.schemas的方式获取schema对象，浏览器端则可以直接使用require获取schema对象。","source":"api-schemas.md","raw":"---\nlayout: default\nid: api-schemas\ntitle: schemas\nprev: api-models.html\nnext: api-responses.html\n---\n\n无论是使用mongodb还是其他数据库，不可避免需要定义数据的schema，使用单独定义schema的方式，好处是可以前后端都可以使用。\n\n启动app后服务器端就可以使用app.schemas的方式获取schema对象，浏览器端则可以直接使用require获取schema对象。","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"api-schemas.html","comments":1,"_id":"cj6hhl3g500012mvgxfmhgr6p","content":"<p>无论是使用mongodb还是其他数据库，不可避免需要定义数据的schema，使用单独定义schema的方式，好处是可以前后端都可以使用。</p>\n<p>启动app后服务器端就可以使用app.schemas的方式获取schema对象，浏览器端则可以直接使用require获取schema对象。</p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>无论是使用mongodb还是其他数据库，不可避免需要定义数据的schema，使用单独定义schema的方式，好处是可以前后端都可以使用。</p>\n<p>启动app后服务器端就可以使用app.schemas的方式获取schema对象，浏览器端则可以直接使用require获取schema对象。</p>\n"},{"layout":"default","id":"api-responses","title":"responses","prev":"api-schemas.html","next":"config.html","_content":"\n使用responses可以定义固定的接口数据返回格式。\n\n比如普通的返回：\n\n```javascript\n  export default function Ok(ctx, data){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : data\n    };\n  }\n```\n\n或者返回列表：\n```javascript\n  export default function List(ctx, {data, page, page_count, total_count}){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : {\n            list : data,\n            _metadata: {\n                page: 51,\n                page_count: 20,\n                total_count: 521\n            }\n        }\n    };\n  }\n```","source":"api-responses.md","raw":"---\nlayout: default\nid: api-responses\ntitle: responses\nprev: api-schemas.html\nnext: config.html\n---\n\n使用responses可以定义固定的接口数据返回格式。\n\n比如普通的返回：\n\n```javascript\n  export default function Ok(ctx, data){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : data\n    };\n  }\n```\n\n或者返回列表：\n```javascript\n  export default function List(ctx, {data, page, page_count, total_count}){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : {\n            list : data,\n            _metadata: {\n                page: 51,\n                page_count: 20,\n                total_count: 521\n            }\n        }\n    };\n  }\n```","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"api-responses.html","comments":1,"_id":"cj6hhl3g500022mvg8lerjtdl","content":"<p>使用responses可以定义固定的接口数据返回格式。</p>\n<p>比如普通的返回：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : data</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者返回列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">List</span>(<span class=\"params\">ctx, &#123;data, page, page_count, total_count&#125;</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : &#123;</div><div class=\"line\">          list : data,</div><div class=\"line\">          _metadata: &#123;</div><div class=\"line\">              page: <span class=\"number\">51</span>,</div><div class=\"line\">              page_count: <span class=\"number\">20</span>,</div><div class=\"line\">              total_count: <span class=\"number\">521</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>使用responses可以定义固定的接口数据返回格式。</p>\n<p>比如普通的返回：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : data</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者返回列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">List</span>(<span class=\"params\">ctx, &#123;data, page, page_count, total_count&#125;</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : &#123;</div><div class=\"line\">          list : data,</div><div class=\"line\">          _metadata: &#123;</div><div class=\"line\">              page: <span class=\"number\">51</span>,</div><div class=\"line\">              page_count: <span class=\"number\">20</span>,</div><div class=\"line\">              total_count: <span class=\"number\">521</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"api-models","title":"models","prev":"api-controllers.html","next":"api-schemas.html","_content":"\n保存model对象的目录，在运行时可以使用`app.models.todos`获取model对象，可以使用任何ORM或者ODM模型库，只要export出该对象就可以了。\n\n比如使用mongoose：\n\n```javascript\nimport {model} from 'mongoose-decorators';\nconst todoSchema = new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n})\n@model(todoSchema)\nexport default class todos {}\n```\n\n除了使用model装饰器，你还可以使用(mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators]的其他装饰器。\n\n或者你也可以不使用装饰器：\n\n```javascript\nexport default app.mongoose.model('todos', new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n}))\n```","source":"api-models.md","raw":"---\nlayout: default\nid: api-models\ntitle: models\nprev: api-controllers.html\nnext: api-schemas.html\n---\n\n保存model对象的目录，在运行时可以使用`app.models.todos`获取model对象，可以使用任何ORM或者ODM模型库，只要export出该对象就可以了。\n\n比如使用mongoose：\n\n```javascript\nimport {model} from 'mongoose-decorators';\nconst todoSchema = new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n})\n@model(todoSchema)\nexport default class todos {}\n```\n\n除了使用model装饰器，你还可以使用(mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators]的其他装饰器。\n\n或者你也可以不使用装饰器：\n\n```javascript\nexport default app.mongoose.model('todos', new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n}))\n```","date":"2017-08-18T06:10:30.000Z","updated":"2017-08-18T06:10:30.000Z","path":"api-models.html","comments":1,"_id":"cj6hhl3g500032mvgws0ghkp9","content":"<p>保存model对象的目录，在运行时可以使用<code>app.models.todos</code>获取model对象，可以使用任何ORM或者ODM模型库，只要export出该对象就可以了。</p>\n<p>比如使用mongoose：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;model&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mongoose-decorators'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> todoSchema = <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;)</div><div class=\"line\">@model(todoSchema)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">todos</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>除了使用model装饰器，你还可以使用(mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators]的其他装饰器。</p>\n<p>或者你也可以不使用装饰器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app.mongoose.model(<span class=\"string\">'todos'</span>, <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>保存model对象的目录，在运行时可以使用<code>app.models.todos</code>获取model对象，可以使用任何ORM或者ODM模型库，只要export出该对象就可以了。</p>\n<p>比如使用mongoose：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;model&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mongoose-decorators'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> todoSchema = <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;)</div><div class=\"line\">@model(todoSchema)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">todos</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>除了使用model装饰器，你还可以使用(mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators]的其他装饰器。</p>\n<p>或者你也可以不使用装饰器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app.mongoose.model(<span class=\"string\">'todos'</span>, <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>"},{"layout":"default","id":"api","title":"api","next":"api-controllers.html","_content":"\napi目录包含应用的大部分业务逻辑，包括MVC架构中的[controller](/doc/api-controllers.html)和[和model](/doc/api-models.html)。\n\n使用new命令创建出来的脚手架目录里面，api包括：\n* controllers\n* models\n* schemas\n* responses\n\n在项目运行时，会将api的这些目录注入到全局app里面，如`app.controllers.IndexController`，可以在需要的时候使用。\n\n注入到app的api目录还包括这些：\n* policies\n* services\n* managers\n* middlewares\n\n以上这些目录不会出现在默认的项目里面，如果用户创建了，则会注入到app。\n","source":"api.md","raw":"---\nlayout: default\nid: api\ntitle: api\nnext: api-controllers.html\n---\n\napi目录包含应用的大部分业务逻辑，包括MVC架构中的[controller](/doc/api-controllers.html)和[和model](/doc/api-models.html)。\n\n使用new命令创建出来的脚手架目录里面，api包括：\n* controllers\n* models\n* schemas\n* responses\n\n在项目运行时，会将api的这些目录注入到全局app里面，如`app.controllers.IndexController`，可以在需要的时候使用。\n\n注入到app的api目录还包括这些：\n* policies\n* services\n* managers\n* middlewares\n\n以上这些目录不会出现在默认的项目里面，如果用户创建了，则会注入到app。\n","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"api.html","comments":1,"_id":"cj6hhl3g600042mvglprt2koj","content":"<p>api目录包含应用的大部分业务逻辑，包括MVC架构中的<a href=\"/doc/api-controllers.html\">controller</a>和<a href=\"/doc/api-models.html\">和model</a>。</p>\n<p>使用new命令创建出来的脚手架目录里面，api包括：</p>\n<ul>\n<li>controllers</li>\n<li>models</li>\n<li>schemas</li>\n<li>responses</li>\n</ul>\n<p>在项目运行时，会将api的这些目录注入到全局app里面，如<code>app.controllers.IndexController</code>，可以在需要的时候使用。</p>\n<p>注入到app的api目录还包括这些：</p>\n<ul>\n<li>policies</li>\n<li>services</li>\n<li>managers</li>\n<li>middlewares</li>\n</ul>\n<p>以上这些目录不会出现在默认的项目里面，如果用户创建了，则会注入到app。</p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>api目录包含应用的大部分业务逻辑，包括MVC架构中的<a href=\"/doc/api-controllers.html\">controller</a>和<a href=\"/doc/api-models.html\">和model</a>。</p>\n<p>使用new命令创建出来的脚手架目录里面，api包括：</p>\n<ul>\n<li>controllers</li>\n<li>models</li>\n<li>schemas</li>\n<li>responses</li>\n</ul>\n<p>在项目运行时，会将api的这些目录注入到全局app里面，如<code>app.controllers.IndexController</code>，可以在需要的时候使用。</p>\n<p>注入到app的api目录还包括这些：</p>\n<ul>\n<li>policies</li>\n<li>services</li>\n<li>managers</li>\n<li>middlewares</li>\n</ul>\n<p>以上这些目录不会出现在默认的项目里面，如果用户创建了，则会注入到app。</p>\n"},{"layout":"default","id":"cli","title":"Cli命令","prev":"installation.html","_content":"\nkoa-cola提供了一些有用的cli命令，包括新建项目、启动项目、生成model schema文件\n\n### 创建koa-cola项目\n\n`koa-cola new app` 或者 `koa-cola n app` 在当前目录创建文件夹名字为app的模版项目，并自动安装依赖，和自动build bundle和启动应用。\n\n### 启动应用\n\n`koa-cola` 在项目目录里面执行，启动项目，node端启动app项目，但是不会build bundle\n\n`koa-cola dev` dev模式启动，build webpack bundle、launch项目、并自动打开浏览器\n\n### build bundle\n\n`koa-cola build` 执行build命令，会自动寻找controller，并通过controller找到view，最后生成Provider，这个Provider会是webapck build js bundle的入口。\n\n**注意：这将会覆盖你的view/app.tsx**\n\n如果你需要维护你的app.tsx，那么你需要运行webpack命令而不是`koa-cola build`\n\n### 生成model schema文件\n\n`koa-cola schema` 或者 `koa-cola s` 生成`api/schenmas`下面的model schema定义，保存在`typings/schema.ts`\n\n","source":"cli.md","raw":"---\nlayout: default\nid: cli\ntitle: Cli命令\nprev: installation.html\n---\n\nkoa-cola提供了一些有用的cli命令，包括新建项目、启动项目、生成model schema文件\n\n### 创建koa-cola项目\n\n`koa-cola new app` 或者 `koa-cola n app` 在当前目录创建文件夹名字为app的模版项目，并自动安装依赖，和自动build bundle和启动应用。\n\n### 启动应用\n\n`koa-cola` 在项目目录里面执行，启动项目，node端启动app项目，但是不会build bundle\n\n`koa-cola dev` dev模式启动，build webpack bundle、launch项目、并自动打开浏览器\n\n### build bundle\n\n`koa-cola build` 执行build命令，会自动寻找controller，并通过controller找到view，最后生成Provider，这个Provider会是webapck build js bundle的入口。\n\n**注意：这将会覆盖你的view/app.tsx**\n\n如果你需要维护你的app.tsx，那么你需要运行webpack命令而不是`koa-cola build`\n\n### 生成model schema文件\n\n`koa-cola schema` 或者 `koa-cola s` 生成`api/schenmas`下面的model schema定义，保存在`typings/schema.ts`\n\n","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"cli.html","comments":1,"_id":"cj6hhl3g600052mvgwtnjj1zl","content":"<p>koa-cola提供了一些有用的cli命令，包括新建项目、启动项目、生成model schema文件</p>\n<h3>创建koa-cola项目</h3>\n<p><code>koa-cola new app</code> 或者 <code>koa-cola n app</code> 在当前目录创建文件夹名字为app的模版项目，并自动安装依赖，和自动build bundle和启动应用。</p>\n<h3>启动应用</h3>\n<p><code>koa-cola</code> 在项目目录里面执行，启动项目，node端启动app项目，但是不会build bundle</p>\n<p><code>koa-cola dev</code> dev模式启动，build webpack bundle、launch项目、并自动打开浏览器</p>\n<h3>build bundle</h3>\n<p><code>koa-cola build</code> 执行build命令，会自动寻找controller，并通过controller找到view，最后生成Provider，这个Provider会是webapck build js bundle的入口。</p>\n<p><strong>注意：这将会覆盖你的view/app.tsx</strong></p>\n<p>如果你需要维护你的app.tsx，那么你需要运行webpack命令而不是<code>koa-cola build</code></p>\n<h3>生成model schema文件</h3>\n<p><code>koa-cola schema</code> 或者 <code>koa-cola s</code> 生成<code>api/schenmas</code>下面的model schema定义，保存在<code>typings/schema.ts</code></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola提供了一些有用的cli命令，包括新建项目、启动项目、生成model schema文件</p>\n<h3>创建koa-cola项目</h3>\n<p><code>koa-cola new app</code> 或者 <code>koa-cola n app</code> 在当前目录创建文件夹名字为app的模版项目，并自动安装依赖，和自动build bundle和启动应用。</p>\n<h3>启动应用</h3>\n<p><code>koa-cola</code> 在项目目录里面执行，启动项目，node端启动app项目，但是不会build bundle</p>\n<p><code>koa-cola dev</code> dev模式启动，build webpack bundle、launch项目、并自动打开浏览器</p>\n<h3>build bundle</h3>\n<p><code>koa-cola build</code> 执行build命令，会自动寻找controller，并通过controller找到view，最后生成Provider，这个Provider会是webapck build js bundle的入口。</p>\n<p><strong>注意：这将会覆盖你的view/app.tsx</strong></p>\n<p>如果你需要维护你的app.tsx，那么你需要运行webpack命令而不是<code>koa-cola build</code></p>\n<h3>生成model schema文件</h3>\n<p><code>koa-cola schema</code> 或者 <code>koa-cola s</code> 生成<code>api/schenmas</code>下面的model schema定义，保存在<code>typings/schema.ts</code></p>\n"},{"layout":"default","id":"compare-next","title":"对比next.js","prev":"ssr.html","next":"universal.html","_content":"\n[next.js](https://github.com/zeit/next.js)是一个比较流行的也是基于react的SSR的应用框架，不过在react技术栈，next.js支持component和react-router，并没有集成redux，在服务器端，也没有太多支持，比如controller层和express/koa中间件，服务器端只是支持简单的路由、静态页面等，koa-cola则是提供前后端完整的解决方案的框架。\n\n## 数据初始化对比\n\n在数据初始化，两者有点类似，next.js使用静态方法getInitialProps来初始化数据：\n\n```javascript\nimport React from 'react'\nexport default class extends React.Component {\n  static async getInitialProps ({ req }) {\n    return req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n```\n\nkoa-cola提供[两种方式](/doc/tip1-react-init.html)来进行数据初始化，更加灵活。\n\n## 子组件初始化\n\nnext.js不支持子组件的数据初始化：\n\nNote: getInitialProps can not be used in children components. Only in pages.\n\nkoa-cola则只需要加上decorator \"include\", 完全支持所有的子组件的数据初始化。\n\n```javascript\nimport * as React from 'react';\n\nconst {\n  asyncConnect,\n  include\n} = require('koa-cola').Decorators.view;\n// Child1, Child2 是asyncConnect的组件，并且会进行数据初始化\nconst Child1 = require('../components/child1').default;\nconst Child2 = require('../components/child2').default;\n\nexport interface Props {}\nexport interface States {}\n\n@asyncConnect([])\n@include({\n  Child1,\n  Child2\n})\nclass MultiChildren extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        <Child1 {...this.props} />\n        <Child2 {...this.props} />\n      </div>\n  }\n}\n\nexport default MultiChildren;\n\n```\n\nkoa-cola不但可以支持component的数据初始化，还可以合并page和component的reducer，使用同一个store，page和component的redux无缝结合。详细可参考[多子组件的redux页面例子源码](https://github.com/hcnode/koa-cola/blob/master/app_test/views/pages/multiChildren.tsx)和[在线Demo](http://koa-cola.com:3001/multiChildren)\n\n","source":"compare-next.md","raw":"---\nlayout: default\nid: compare-next\ntitle: 对比next.js\nprev: ssr.html\nnext: universal.html\n---\n\n[next.js](https://github.com/zeit/next.js)是一个比较流行的也是基于react的SSR的应用框架，不过在react技术栈，next.js支持component和react-router，并没有集成redux，在服务器端，也没有太多支持，比如controller层和express/koa中间件，服务器端只是支持简单的路由、静态页面等，koa-cola则是提供前后端完整的解决方案的框架。\n\n## 数据初始化对比\n\n在数据初始化，两者有点类似，next.js使用静态方法getInitialProps来初始化数据：\n\n```javascript\nimport React from 'react'\nexport default class extends React.Component {\n  static async getInitialProps ({ req }) {\n    return req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n```\n\nkoa-cola提供[两种方式](/doc/tip1-react-init.html)来进行数据初始化，更加灵活。\n\n## 子组件初始化\n\nnext.js不支持子组件的数据初始化：\n\nNote: getInitialProps can not be used in children components. Only in pages.\n\nkoa-cola则只需要加上decorator \"include\", 完全支持所有的子组件的数据初始化。\n\n```javascript\nimport * as React from 'react';\n\nconst {\n  asyncConnect,\n  include\n} = require('koa-cola').Decorators.view;\n// Child1, Child2 是asyncConnect的组件，并且会进行数据初始化\nconst Child1 = require('../components/child1').default;\nconst Child2 = require('../components/child2').default;\n\nexport interface Props {}\nexport interface States {}\n\n@asyncConnect([])\n@include({\n  Child1,\n  Child2\n})\nclass MultiChildren extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        <Child1 {...this.props} />\n        <Child2 {...this.props} />\n      </div>\n  }\n}\n\nexport default MultiChildren;\n\n```\n\nkoa-cola不但可以支持component的数据初始化，还可以合并page和component的reducer，使用同一个store，page和component的redux无缝结合。详细可参考[多子组件的redux页面例子源码](https://github.com/hcnode/koa-cola/blob/master/app_test/views/pages/multiChildren.tsx)和[在线Demo](http://koa-cola.com:3001/multiChildren)\n\n","date":"2017-08-18T06:10:28.000Z","updated":"2017-08-18T06:10:28.000Z","path":"compare-next.html","comments":1,"_id":"cj6hhl3g700062mvgcgu230yo","content":"<p><a href=\"https://github.com/zeit/next.js\" target=\"_blank\" rel=\"external\">next.js</a>是一个比较流行的也是基于react的SSR的应用框架，不过在react技术栈，next.js支持component和react-router，并没有集成redux，在服务器端，也没有太多支持，比如controller层和express/koa中间件，服务器端只是支持简单的路由、静态页面等，koa-cola则是提供前后端完整的解决方案的框架。</p>\n<h2>数据初始化对比</h2>\n<p>在数据初始化，两者有点类似，next.js使用静态方法getInitialProps来初始化数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> getInitialProps (&#123; req &#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola提供<a href=\"/doc/tip1-react-init.html\">两种方式</a>来进行数据初始化，更加灵活。</p>\n<h2>子组件初始化</h2>\n<p>next.js不支持子组件的数据初始化：</p>\n<p>Note: getInitialProps can not be used in children components. Only in pages.</p>\n<p>koa-cola则只需要加上decorator &quot;include&quot;, 完全支持所有的子组件的数据初始化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  asyncConnect,</div><div class=\"line\">  include</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\"><span class=\"comment\">// Child1, Child2 是asyncConnect的组件，并且会进行数据初始化</span></div><div class=\"line\"><span class=\"keyword\">const</span> Child1 = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/child1'</span>).default;</div><div class=\"line\"><span class=\"keyword\">const</span> Child2 = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/child2'</span>).default;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> interface Props &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> interface States &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">@asyncConnect([])</div><div class=\"line\">@include(&#123;</div><div class=\"line\">  Child1,</div><div class=\"line\">  Child2</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiChildren</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &lt;Child1 &#123;...this.props&#125; /&gt;</div><div class=\"line\">        &lt;Child2 &#123;...this.props&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default MultiChildren;</div></pre></td></tr></table></figure>\n<p>koa-cola不但可以支持component的数据初始化，还可以合并page和component的reducer，使用同一个store，page和component的redux无缝结合。详细可参考<a href=\"https://github.com/hcnode/koa-cola/blob/master/app_test/views/pages/multiChildren.tsx\" target=\"_blank\" rel=\"external\">多子组件的redux页面例子源码</a>和<a href=\"http://koa-cola.com:3001/multiChildren\" target=\"_blank\" rel=\"external\">在线Demo</a></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p><a href=\"https://github.com/zeit/next.js\" target=\"_blank\" rel=\"external\">next.js</a>是一个比较流行的也是基于react的SSR的应用框架，不过在react技术栈，next.js支持component和react-router，并没有集成redux，在服务器端，也没有太多支持，比如controller层和express/koa中间件，服务器端只是支持简单的路由、静态页面等，koa-cola则是提供前后端完整的解决方案的框架。</p>\n<h2>数据初始化对比</h2>\n<p>在数据初始化，两者有点类似，next.js使用静态方法getInitialProps来初始化数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> getInitialProps (&#123; req &#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola提供<a href=\"/doc/tip1-react-init.html\">两种方式</a>来进行数据初始化，更加灵活。</p>\n<h2>子组件初始化</h2>\n<p>next.js不支持子组件的数据初始化：</p>\n<p>Note: getInitialProps can not be used in children components. Only in pages.</p>\n<p>koa-cola则只需要加上decorator &quot;include&quot;, 完全支持所有的子组件的数据初始化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  asyncConnect,</div><div class=\"line\">  include</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\"><span class=\"comment\">// Child1, Child2 是asyncConnect的组件，并且会进行数据初始化</span></div><div class=\"line\"><span class=\"keyword\">const</span> Child1 = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/child1'</span>).default;</div><div class=\"line\"><span class=\"keyword\">const</span> Child2 = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/child2'</span>).default;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> interface Props &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> interface States &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">@asyncConnect([])</div><div class=\"line\">@include(&#123;</div><div class=\"line\">  Child1,</div><div class=\"line\">  Child2</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiChildren</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &lt;Child1 &#123;...this.props&#125; /&gt;</div><div class=\"line\">        &lt;Child2 &#123;...this.props&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default MultiChildren;</div></pre></td></tr></table></figure>\n<p>koa-cola不但可以支持component的数据初始化，还可以合并page和component的reducer，使用同一个store，page和component的redux无缝结合。详细可参考<a href=\"https://github.com/hcnode/koa-cola/blob/master/app_test/views/pages/multiChildren.tsx\" target=\"_blank\" rel=\"external\">多子组件的redux页面例子源码</a>和<a href=\"http://koa-cola.com:3001/multiChildren\" target=\"_blank\" rel=\"external\">在线Demo</a></p>\n"},{"layout":"default","id":"config","title":"config","prev":"api-responses.html","next":"config-env.html","_content":"\n通过约定config目录下所有文件都会成为config的属性，运行时会被env环境下的配置覆盖，所有配置在app.config。\n\n\t> config\n\t    > env\n            local.js\n            test.js\n            development.js\n        development.js\n        production.js\n        any_config_you_need.js \n        ...\n\n比如配置any_config_you_need.js \n\n    exports.module = {\n        foo : 'bar'\n    }\n\n\n如果当前是development环境，并且config/env/development.js:\n\n    exports.module = {\n        foo : 'wow'\n    }\n\n那么`app.config.foo == 'wow'`","source":"config.md","raw":"---\nlayout: default\nid: config\ntitle: config\nprev: api-responses.html\nnext: config-env.html\n---\n\n通过约定config目录下所有文件都会成为config的属性，运行时会被env环境下的配置覆盖，所有配置在app.config。\n\n\t> config\n\t    > env\n            local.js\n            test.js\n            development.js\n        development.js\n        production.js\n        any_config_you_need.js \n        ...\n\n比如配置any_config_you_need.js \n\n    exports.module = {\n        foo : 'bar'\n    }\n\n\n如果当前是development环境，并且config/env/development.js:\n\n    exports.module = {\n        foo : 'wow'\n    }\n\n那么`app.config.foo == 'wow'`","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"config.html","comments":1,"_id":"cj6hhl3g700072mvgsj070l1u","content":"<p>通过约定config目录下所有文件都会成为config的属性，运行时会被env环境下的配置覆盖，所有配置在app.config。</p>\n<pre><code>&gt; config\n    &gt; env\n        local.js\n        test.js\n        development.js\n    development.js\n    production.js\n    any_config_you_need.js \n    ...\n</code></pre>\n<p>比如配置any_config_you_need.js</p>\n<pre><code>exports.module = {\n    foo : 'bar'\n}\n</code></pre>\n<p>如果当前是development环境，并且config/env/development.js:</p>\n<pre><code>exports.module = {\n    foo : 'wow'\n}\n</code></pre>\n<p>那么<code>app.config.foo == 'wow'</code></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>通过约定config目录下所有文件都会成为config的属性，运行时会被env环境下的配置覆盖，所有配置在app.config。</p>\n<pre><code>&gt; config\n    &gt; env\n        local.js\n        test.js\n        development.js\n    development.js\n    production.js\n    any_config_you_need.js \n    ...\n</code></pre>\n<p>比如配置any_config_you_need.js</p>\n<pre><code>exports.module = {\n    foo : 'bar'\n}\n</code></pre>\n<p>如果当前是development环境，并且config/env/development.js:</p>\n<pre><code>exports.module = {\n    foo : 'wow'\n}\n</code></pre>\n<p>那么<code>app.config.foo == 'wow'</code></p>\n"},{"layout":"default","id":"d-mvc","title":"decorator的mvc开发模式","prev":"universal.html","next":"installation.html","_content":"\nkoa-cola可以使用es7的decorator装饰器开发模式来写mvc，controller是必须用提供的decorator来开发（因为涉及到router相关的定义），model和view层则没有强制需要demo所演示的decorator来开发。\n### Controller\n    \n使用decorator装饰器来注入相关依赖，路由层的decorators包括router、中间件、response、view，响应阶段的decorators包括koa.Context、param、response、request等，比如以下例子：\n\n```javascript\nconst { Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response } = require('koa-cola').Decorators.controller;\n@Controller('') \nclass FooController {\n    @Get('/some_api')  // 定义router以及method\n    @Response(Ok)       // 定义数据返回的结构\n    some_api (@Ctx() ctx, @QueryParam() param : any) { // 注入ctx和param\n        // 初始化数据，数据将会以“Ok”定义的格式返回\n        return {\n            foo : 'bar'\n        }\n    }\n\n    @Get('/some_page')  // 定义router以及method\n    @View('some_page')\n    some_page (@Ctx() ctx, @QueryParam() param : any) { // 注入ctx和param\n        // 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo\n        return {\n            foo : 'bar'\n        }\n    }\n}\n```\n\n\n因为使用decorator定义router，所以在koa-cola里面不需要单独定义router。\n\n### View\n\nview层可以是简单的React.Component或者是stateless的函数组件，也可以是使用官方的react-redux封装过的组件，todolist demo的view则是使用了[redux-connect](https://github.com/makeomatic/redux-connect) 提供的decorator(当然你也可以直接用它的connect方法)，redux-connect也是基于react-redux，以下是view层支持的react组件类型。\n    \n#### React.Component组件\n\n```javascript\n    class Index extends React.Component<Props, States>   {\n        constructor(props: Props) {\n            super(props);\n        }\n        static defaultProps = {\n            \n        };\n        render() {\n            return <h1>Wow koa-cola!</h1>\n        }\n    };\n    export default Index\n```\n\n#### stateless组件\n\n```javascript\n    export default function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n```\n\n#### react-redux组件\n\n```javascript\n    import { connect } from 'react-redux'\n    const Index = function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n    export default connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Index)\n```\n\n#### redux-connect的decorator\n使用这种方式的话，需要注意两点：\n* redux的reducer需要使用装饰器colaReducer\n* 如果有子组件也是使用redux-connect封装，则需要使用装饰器include\n* 以上两点可以参考todolist的[代码](https://github.com/koa-cola/todolist/blob/master/views/pages/colastyleDemo.tsx)\n\n```javascript\nimport AddTodo from '../official-demo/containers/AddTodo';\nimport FilterLink from '../official-demo/containers/FilterLink';\nimport VisibleTodoList from '../official-demo/containers/VisibleTodoList';\nconst {\n  asyncConnect,\n  colaReducer,\n  include\n} = require('koa-cola').Decorators.view;\n@asyncConnect([\n  {\n    key: 'todosData',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n      const api = new GetTodoList({});\n      const data = await api.fetch(helpers.ctx);\n      dispatch({\n        type: 'INIT_TODO',\n        data: data.result.result\n      });\n      return data.result.result;\n    }\n  }\n])\n@colaReducer({\n  todos,\n  visibilityFilter\n})\n@include({ AddTodo, FilterLink, VisibleTodoList })\nclass ColastyleDemo extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <App />;\n  }\n}\nexport default ColastyleDemo;\n```\n\n#### 自定义header和bundle方式\n\nkoa-cola渲染页面时，默认会找views/pages/layout.ts封装页面的html，如果没有这个layout文件，则直接输出page组件的html，如果view组件使用了doNotUseLayout decorator，则页面不会使用layout.ts输出，这时你可以自定义header和bundle的decorator。\n\n```javascript\nimport * as React from 'react';\nconst {\n  header, bundle, doNotUseLayout\n} = require('../../../dist').Decorators.view;\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nfunction Page (){\n  return <h1>koa-cola</h1>\n};\nexport default Page\n```\n\n### Model\n和必须使用decorator的controller层、必须使用react组件的view层不一样，model层是完全没有耦合，你可以使用任何你喜欢的orm或者odm，或者不需要model层也可以，不过使用koa-cola风格的来写model，你可以体验不一样的开发模式。\n\n#### 你可以直接在目录api/models下创建如user.ts：\n```javascript\nimport * as mongoose from 'mongoose'\nexport default mongoose.model('user', new mongoose.Schema({\n    name : String,\n    email : String\n}))\n```\n\n然后就可以在其他代码里面使用：\n```javascript\nconst user = await app.models.user.find({name : 'harry'})\n```\n\n#### 使用koa-cola的风格写model\n\n首先在`api/schemas`目录创建user.ts\n\n```javascript\nexport const userSchema = function(mongoose){\n    return {\n        name: {\n            type : String\n        },\n        email : {\n            type : String\n        }\n    }\n}\n```\n\n在目录`api/models`下创建model如user.ts：\n```javascript\nimport * as mongoose from 'mongoose'\nimport userSchema from '../schemas/user'\nexport default mongoose.model('user', new mongoose.Schema(userSchema(mongoose)))\n```\n\n当然也可以使用decorator方式定义model，还可以定义相关hook，详情可以参考[mongoose-decorators](https://github.com/aksyonov/mongoose-decorators)\n\n```javascript\nimport { todoListSchema } from '../schemas/todoList';\nconst { model } = app.decorators.model;\n\n@model(todoListSchema(app.mongoose))\nexport default class TodoList {}\n```\n\n使用cli生成model的schema\n\n`koa-cola --schema` 自动生成model的接口定义在`typings/schema.ts`\n\n然后你可以在代码通过使用typescript的类型定义，享受vscode的intellisense带来的乐趣\n```javascript\nimport {userSchema} from './typings/schema' \nconst user : userSchema = await app.models.user.find({name : 'harry'})\n```\n\n在前面提到的为什么需要在api/schemas定义model的schema，除了上面可以自动生成schema的接口，这部分可以在浏览器端代码复用，比如数据Validate。详细可以查看[文档](http://mongoosejs.com/docs/browser.html)\n\n#### koa-cola提供了前后端universal的api接口定义，比如todolist demo的获取数据的接口定义\n\n```javascript\nimport { todoListSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola';\n\nexport class GetTodoList extends ApiBase<\n  {\n      // 参数类型\n  },\n  {\n    code: number;\n    result: [todoListSchema];\n  },\n  {\n      // 异常定义\n  }\n> {\n  constructor(body) {\n    super(body);\n  }\n  url: string = '/api/getTodoList';\n  method: string = 'get';\n}\n```\n\n在代码里面使用api，并享受ts带来的乐趣：\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"/>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"/>\n\n又比如参数body的定义，如果定义了必传参数，调用时候没有传，则vscode会提示错误\n```javascript\nimport { testSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola'\nexport interface ComposeBody{\n    foo : string,\n    bar? : number\n}\nexport class Compose extends ApiBase<ComposeBody, testSchema, {}>{\n    constructor(body : ComposeBody){\n        super(body)\n    }\n    url : string = '/compose'\n    method : string = 'post'\n}\n```\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"/>\n","source":"d-mvc.md","raw":"---\nlayout: default\nid: d-mvc\ntitle: decorator的mvc开发模式\nprev: universal.html\nnext: installation.html\n---\n\nkoa-cola可以使用es7的decorator装饰器开发模式来写mvc，controller是必须用提供的decorator来开发（因为涉及到router相关的定义），model和view层则没有强制需要demo所演示的decorator来开发。\n### Controller\n    \n使用decorator装饰器来注入相关依赖，路由层的decorators包括router、中间件、response、view，响应阶段的decorators包括koa.Context、param、response、request等，比如以下例子：\n\n```javascript\nconst { Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response } = require('koa-cola').Decorators.controller;\n@Controller('') \nclass FooController {\n    @Get('/some_api')  // 定义router以及method\n    @Response(Ok)       // 定义数据返回的结构\n    some_api (@Ctx() ctx, @QueryParam() param : any) { // 注入ctx和param\n        // 初始化数据，数据将会以“Ok”定义的格式返回\n        return {\n            foo : 'bar'\n        }\n    }\n\n    @Get('/some_page')  // 定义router以及method\n    @View('some_page')\n    some_page (@Ctx() ctx, @QueryParam() param : any) { // 注入ctx和param\n        // 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo\n        return {\n            foo : 'bar'\n        }\n    }\n}\n```\n\n\n因为使用decorator定义router，所以在koa-cola里面不需要单独定义router。\n\n### View\n\nview层可以是简单的React.Component或者是stateless的函数组件，也可以是使用官方的react-redux封装过的组件，todolist demo的view则是使用了[redux-connect](https://github.com/makeomatic/redux-connect) 提供的decorator(当然你也可以直接用它的connect方法)，redux-connect也是基于react-redux，以下是view层支持的react组件类型。\n    \n#### React.Component组件\n\n```javascript\n    class Index extends React.Component<Props, States>   {\n        constructor(props: Props) {\n            super(props);\n        }\n        static defaultProps = {\n            \n        };\n        render() {\n            return <h1>Wow koa-cola!</h1>\n        }\n    };\n    export default Index\n```\n\n#### stateless组件\n\n```javascript\n    export default function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n```\n\n#### react-redux组件\n\n```javascript\n    import { connect } from 'react-redux'\n    const Index = function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n    export default connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Index)\n```\n\n#### redux-connect的decorator\n使用这种方式的话，需要注意两点：\n* redux的reducer需要使用装饰器colaReducer\n* 如果有子组件也是使用redux-connect封装，则需要使用装饰器include\n* 以上两点可以参考todolist的[代码](https://github.com/koa-cola/todolist/blob/master/views/pages/colastyleDemo.tsx)\n\n```javascript\nimport AddTodo from '../official-demo/containers/AddTodo';\nimport FilterLink from '../official-demo/containers/FilterLink';\nimport VisibleTodoList from '../official-demo/containers/VisibleTodoList';\nconst {\n  asyncConnect,\n  colaReducer,\n  include\n} = require('koa-cola').Decorators.view;\n@asyncConnect([\n  {\n    key: 'todosData',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n      const api = new GetTodoList({});\n      const data = await api.fetch(helpers.ctx);\n      dispatch({\n        type: 'INIT_TODO',\n        data: data.result.result\n      });\n      return data.result.result;\n    }\n  }\n])\n@colaReducer({\n  todos,\n  visibilityFilter\n})\n@include({ AddTodo, FilterLink, VisibleTodoList })\nclass ColastyleDemo extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <App />;\n  }\n}\nexport default ColastyleDemo;\n```\n\n#### 自定义header和bundle方式\n\nkoa-cola渲染页面时，默认会找views/pages/layout.ts封装页面的html，如果没有这个layout文件，则直接输出page组件的html，如果view组件使用了doNotUseLayout decorator，则页面不会使用layout.ts输出，这时你可以自定义header和bundle的decorator。\n\n```javascript\nimport * as React from 'react';\nconst {\n  header, bundle, doNotUseLayout\n} = require('../../../dist').Decorators.view;\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nfunction Page (){\n  return <h1>koa-cola</h1>\n};\nexport default Page\n```\n\n### Model\n和必须使用decorator的controller层、必须使用react组件的view层不一样，model层是完全没有耦合，你可以使用任何你喜欢的orm或者odm，或者不需要model层也可以，不过使用koa-cola风格的来写model，你可以体验不一样的开发模式。\n\n#### 你可以直接在目录api/models下创建如user.ts：\n```javascript\nimport * as mongoose from 'mongoose'\nexport default mongoose.model('user', new mongoose.Schema({\n    name : String,\n    email : String\n}))\n```\n\n然后就可以在其他代码里面使用：\n```javascript\nconst user = await app.models.user.find({name : 'harry'})\n```\n\n#### 使用koa-cola的风格写model\n\n首先在`api/schemas`目录创建user.ts\n\n```javascript\nexport const userSchema = function(mongoose){\n    return {\n        name: {\n            type : String\n        },\n        email : {\n            type : String\n        }\n    }\n}\n```\n\n在目录`api/models`下创建model如user.ts：\n```javascript\nimport * as mongoose from 'mongoose'\nimport userSchema from '../schemas/user'\nexport default mongoose.model('user', new mongoose.Schema(userSchema(mongoose)))\n```\n\n当然也可以使用decorator方式定义model，还可以定义相关hook，详情可以参考[mongoose-decorators](https://github.com/aksyonov/mongoose-decorators)\n\n```javascript\nimport { todoListSchema } from '../schemas/todoList';\nconst { model } = app.decorators.model;\n\n@model(todoListSchema(app.mongoose))\nexport default class TodoList {}\n```\n\n使用cli生成model的schema\n\n`koa-cola --schema` 自动生成model的接口定义在`typings/schema.ts`\n\n然后你可以在代码通过使用typescript的类型定义，享受vscode的intellisense带来的乐趣\n```javascript\nimport {userSchema} from './typings/schema' \nconst user : userSchema = await app.models.user.find({name : 'harry'})\n```\n\n在前面提到的为什么需要在api/schemas定义model的schema，除了上面可以自动生成schema的接口，这部分可以在浏览器端代码复用，比如数据Validate。详细可以查看[文档](http://mongoosejs.com/docs/browser.html)\n\n#### koa-cola提供了前后端universal的api接口定义，比如todolist demo的获取数据的接口定义\n\n```javascript\nimport { todoListSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola';\n\nexport class GetTodoList extends ApiBase<\n  {\n      // 参数类型\n  },\n  {\n    code: number;\n    result: [todoListSchema];\n  },\n  {\n      // 异常定义\n  }\n> {\n  constructor(body) {\n    super(body);\n  }\n  url: string = '/api/getTodoList';\n  method: string = 'get';\n}\n```\n\n在代码里面使用api，并享受ts带来的乐趣：\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"/>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"/>\n\n又比如参数body的定义，如果定义了必传参数，调用时候没有传，则vscode会提示错误\n```javascript\nimport { testSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola'\nexport interface ComposeBody{\n    foo : string,\n    bar? : number\n}\nexport class Compose extends ApiBase<ComposeBody, testSchema, {}>{\n    constructor(body : ComposeBody){\n        super(body)\n    }\n    url : string = '/compose'\n    method : string = 'post'\n}\n```\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"/>\n","date":"2017-08-18T06:10:25.000Z","updated":"2017-08-18T06:10:25.000Z","path":"d-mvc.html","comments":1,"_id":"cj6hhl3g700082mvg65qs0b2c","content":"<p>koa-cola可以使用es7的decorator装饰器开发模式来写mvc，controller是必须用提供的decorator来开发（因为涉及到router相关的定义），model和view层则没有强制需要demo所演示的decorator来开发。</p>\n<h3>Controller</h3>\n<p>使用decorator装饰器来注入相关依赖，路由层的decorators包括router、中间件、response、view，响应阶段的decorators包括koa.Context、param、response、request等，比如以下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.controller;</div><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/some_api'</span>)  <span class=\"comment\">// 定义router以及method</span></div><div class=\"line\">    @Response(Ok)       <span class=\"comment\">// 定义数据返回的结构</span></div><div class=\"line\">    some_api (@Ctx() ctx, @QueryParam() param : any) &#123; <span class=\"comment\">// 注入ctx和param</span></div><div class=\"line\">        <span class=\"comment\">// 初始化数据，数据将会以“Ok”定义的格式返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Get(<span class=\"string\">'/some_page'</span>)  <span class=\"comment\">// 定义router以及method</span></div><div class=\"line\">    @View(<span class=\"string\">'some_page'</span>)</div><div class=\"line\">    some_page (@Ctx() ctx, @QueryParam() param : any) &#123; <span class=\"comment\">// 注入ctx和param</span></div><div class=\"line\">        <span class=\"comment\">// 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为使用decorator定义router，所以在koa-cola里面不需要单独定义router。</p>\n<h3>View</h3>\n<p>view层可以是简单的React.Component或者是stateless的函数组件，也可以是使用官方的react-redux封装过的组件，todolist demo的view则是使用了<a href=\"https://github.com/makeomatic/redux-connect\" target=\"_blank\" rel=\"external\">redux-connect</a> 提供的decorator(当然你也可以直接用它的connect方法)，redux-connect也是基于react-redux，以下是view层支持的react组件类型。</p>\n<h4>React.Component组件</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<h4>stateless组件</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>react-redux组件</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<h4>redux-connect的decorator</h4>\n<p>使用这种方式的话，需要注意两点：</p>\n<ul>\n<li>redux的reducer需要使用装饰器colaReducer</li>\n<li>如果有子组件也是使用redux-connect封装，则需要使用装饰器include</li>\n<li>以上两点可以参考todolist的<a href=\"https://github.com/koa-cola/todolist/blob/master/views/pages/colastyleDemo.tsx\" target=\"_blank\" rel=\"external\">代码</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AddTodo <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/AddTodo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FilterLink <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/FilterLink'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> VisibleTodoList <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/VisibleTodoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  asyncConnect,</div><div class=\"line\">  colaReducer,</div><div class=\"line\">  include</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'todosData'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">      <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">      dispatch(&#123;</div><div class=\"line\">        type: <span class=\"string\">'INIT_TODO'</span>,</div><div class=\"line\">        data: data.result.result</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\">@colaReducer(&#123;</div><div class=\"line\">  todos,</div><div class=\"line\">  visibilityFilter</div><div class=\"line\">&#125;)</div><div class=\"line\">@include(&#123; AddTodo, FilterLink, VisibleTodoList &#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColastyleDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;App /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default ColastyleDemo;</div></pre></td></tr></table></figure>\n<h4>自定义header和bundle方式</h4>\n<p>koa-cola渲染页面时，默认会找views/pages/layout.ts封装页面的html，如果没有这个layout文件，则直接输出page组件的html，如果view组件使用了doNotUseLayout decorator，则页面不会使用layout.ts输出，这时你可以自定义header和bundle的decorator。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  header, bundle, doNotUseLayout</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'../../../dist'</span>).Decorators.view;</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;head&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">&#125;)</div><div class=\"line\">function Page ()&#123;</div><div class=\"line\">  return &lt;h1&gt;koa-cola&lt;/h1&gt;</div><div class=\"line\">&#125;;</div><div class=\"line\">export default Page</div></pre></td></tr></table></figure>\n<h3>Model</h3>\n<p>和必须使用decorator的controller层、必须使用react组件的view层不一样，model层是完全没有耦合，你可以使用任何你喜欢的orm或者odm，或者不需要model层也可以，不过使用koa-cola风格的来写model，你可以体验不一样的开发模式。</p>\n<h4>你可以直接在目录api/models下创建如user.ts：</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    email : <span class=\"built_in\">String</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>\n<p>然后就可以在其他代码里面使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<h4>使用koa-cola的风格写model</h4>\n<p>首先在<code>api/schemas</code>目录创建user.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> userSchema = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mongoose</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        name: &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        email : &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在目录<code>api/models</code>下创建model如user.ts：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">import</span> userSchema <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/user'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(userSchema(mongoose)))</div></pre></td></tr></table></figure>\n<p>当然也可以使用decorator方式定义model，还可以定义相关hook，详情可以参考<a href=\"https://github.com/aksyonov/mongoose-decorators\" target=\"_blank\" rel=\"external\">mongoose-decorators</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/todoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; model &#125; = app.decorators.model;</div><div class=\"line\"></div><div class=\"line\">@model(todoListSchema(app.mongoose))</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>使用cli生成model的schema</p>\n<p><code>koa-cola --schema</code> 自动生成model的接口定义在<code>typings/schema.ts</code></p>\n<p>然后你可以在代码通过使用typescript的类型定义，享受vscode的intellisense带来的乐趣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;userSchema&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span> </div><div class=\"line\"><span class=\"keyword\">const</span> user : userSchema = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>在前面提到的为什么需要在api/schemas定义model的schema，除了上面可以自动生成schema的接口，这部分可以在浏览器端代码复用，比如数据Validate。详细可以查看<a href=\"http://mongoosejs.com/docs/browser.html\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h4>koa-cola提供了前后端universal的api接口定义，比如todolist demo的获取数据的接口定义</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetTodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;</span></div><div class=\"line\"><span class=\"class\">  </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 参数类型</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    code: number;</div><div class=\"line\">    result: [todoListSchema];</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">      <span class=\"comment\">// 异常定义</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(body) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">  url: string = <span class=\"string\">'/api/getTodoList'</span>;</div><div class=\"line\">  method: string = <span class=\"string\">'get'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在代码里面使用api，并享受ts带来的乐趣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"><br>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"></p>\n<p>又比如参数body的定义，如果定义了必传参数，调用时候没有传，则vscode会提示错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; testSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface ComposeBody&#123;</div><div class=\"line\">    foo : string,</div><div class=\"line\">    bar? : number</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compose</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;<span class=\"title\">ComposeBody</span>, <span class=\"title\">testSchema</span>, </span>&#123;&#125;&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(body : ComposeBody)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(body)</div><div class=\"line\">    &#125;</div><div class=\"line\">    url : string = <span class=\"string\">'/compose'</span></div><div class=\"line\">    method : string = <span class=\"string\">'post'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola可以使用es7的decorator装饰器开发模式来写mvc，controller是必须用提供的decorator来开发（因为涉及到router相关的定义），model和view层则没有强制需要demo所演示的decorator来开发。</p>\n<h3>Controller</h3>\n<p>使用decorator装饰器来注入相关依赖，路由层的decorators包括router、中间件、response、view，响应阶段的decorators包括koa.Context、param、response、request等，比如以下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.controller;</div><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/some_api'</span>)  <span class=\"comment\">// 定义router以及method</span></div><div class=\"line\">    @Response(Ok)       <span class=\"comment\">// 定义数据返回的结构</span></div><div class=\"line\">    some_api (@Ctx() ctx, @QueryParam() param : any) &#123; <span class=\"comment\">// 注入ctx和param</span></div><div class=\"line\">        <span class=\"comment\">// 初始化数据，数据将会以“Ok”定义的格式返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Get(<span class=\"string\">'/some_page'</span>)  <span class=\"comment\">// 定义router以及method</span></div><div class=\"line\">    @View(<span class=\"string\">'some_page'</span>)</div><div class=\"line\">    some_page (@Ctx() ctx, @QueryParam() param : any) &#123; <span class=\"comment\">// 注入ctx和param</span></div><div class=\"line\">        <span class=\"comment\">// 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为使用decorator定义router，所以在koa-cola里面不需要单独定义router。</p>\n<h3>View</h3>\n<p>view层可以是简单的React.Component或者是stateless的函数组件，也可以是使用官方的react-redux封装过的组件，todolist demo的view则是使用了<a href=\"https://github.com/makeomatic/redux-connect\" target=\"_blank\" rel=\"external\">redux-connect</a> 提供的decorator(当然你也可以直接用它的connect方法)，redux-connect也是基于react-redux，以下是view层支持的react组件类型。</p>\n<h4>React.Component组件</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<h4>stateless组件</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>react-redux组件</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<h4>redux-connect的decorator</h4>\n<p>使用这种方式的话，需要注意两点：</p>\n<ul>\n<li>redux的reducer需要使用装饰器colaReducer</li>\n<li>如果有子组件也是使用redux-connect封装，则需要使用装饰器include</li>\n<li>以上两点可以参考todolist的<a href=\"https://github.com/koa-cola/todolist/blob/master/views/pages/colastyleDemo.tsx\" target=\"_blank\" rel=\"external\">代码</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AddTodo <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/AddTodo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FilterLink <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/FilterLink'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> VisibleTodoList <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/VisibleTodoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  asyncConnect,</div><div class=\"line\">  colaReducer,</div><div class=\"line\">  include</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'todosData'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">      <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">      dispatch(&#123;</div><div class=\"line\">        type: <span class=\"string\">'INIT_TODO'</span>,</div><div class=\"line\">        data: data.result.result</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\">@colaReducer(&#123;</div><div class=\"line\">  todos,</div><div class=\"line\">  visibilityFilter</div><div class=\"line\">&#125;)</div><div class=\"line\">@include(&#123; AddTodo, FilterLink, VisibleTodoList &#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColastyleDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;App /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default ColastyleDemo;</div></pre></td></tr></table></figure>\n<h4>自定义header和bundle方式</h4>\n<p>koa-cola渲染页面时，默认会找views/pages/layout.ts封装页面的html，如果没有这个layout文件，则直接输出page组件的html，如果view组件使用了doNotUseLayout decorator，则页面不会使用layout.ts输出，这时你可以自定义header和bundle的decorator。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  header, bundle, doNotUseLayout</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'../../../dist'</span>).Decorators.view;</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;head&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">&#125;)</div><div class=\"line\">function Page ()&#123;</div><div class=\"line\">  return &lt;h1&gt;koa-cola&lt;/h1&gt;</div><div class=\"line\">&#125;;</div><div class=\"line\">export default Page</div></pre></td></tr></table></figure>\n<h3>Model</h3>\n<p>和必须使用decorator的controller层、必须使用react组件的view层不一样，model层是完全没有耦合，你可以使用任何你喜欢的orm或者odm，或者不需要model层也可以，不过使用koa-cola风格的来写model，你可以体验不一样的开发模式。</p>\n<h4>你可以直接在目录api/models下创建如user.ts：</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    email : <span class=\"built_in\">String</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>\n<p>然后就可以在其他代码里面使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<h4>使用koa-cola的风格写model</h4>\n<p>首先在<code>api/schemas</code>目录创建user.ts</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> userSchema = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mongoose</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        name: &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        email : &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在目录<code>api/models</code>下创建model如user.ts：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">import</span> userSchema <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/user'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(userSchema(mongoose)))</div></pre></td></tr></table></figure>\n<p>当然也可以使用decorator方式定义model，还可以定义相关hook，详情可以参考<a href=\"https://github.com/aksyonov/mongoose-decorators\" target=\"_blank\" rel=\"external\">mongoose-decorators</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/todoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; model &#125; = app.decorators.model;</div><div class=\"line\"></div><div class=\"line\">@model(todoListSchema(app.mongoose))</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>使用cli生成model的schema</p>\n<p><code>koa-cola --schema</code> 自动生成model的接口定义在<code>typings/schema.ts</code></p>\n<p>然后你可以在代码通过使用typescript的类型定义，享受vscode的intellisense带来的乐趣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;userSchema&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span> </div><div class=\"line\"><span class=\"keyword\">const</span> user : userSchema = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>在前面提到的为什么需要在api/schemas定义model的schema，除了上面可以自动生成schema的接口，这部分可以在浏览器端代码复用，比如数据Validate。详细可以查看<a href=\"http://mongoosejs.com/docs/browser.html\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h4>koa-cola提供了前后端universal的api接口定义，比如todolist demo的获取数据的接口定义</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetTodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;</span></div><div class=\"line\"><span class=\"class\">  </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 参数类型</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    code: number;</div><div class=\"line\">    result: [todoListSchema];</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">      <span class=\"comment\">// 异常定义</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(body) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">  url: string = <span class=\"string\">'/api/getTodoList'</span>;</div><div class=\"line\">  method: string = <span class=\"string\">'get'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在代码里面使用api，并享受ts带来的乐趣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"><br>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"></p>\n<p>又比如参数body的定义，如果定义了必传参数，调用时候没有传，则vscode会提示错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; testSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface ComposeBody&#123;</div><div class=\"line\">    foo : string,</div><div class=\"line\">    bar? : number</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compose</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;<span class=\"title\">ComposeBody</span>, <span class=\"title\">testSchema</span>, </span>&#123;&#125;&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(body : ComposeBody)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(body)</div><div class=\"line\">    &#125;</div><div class=\"line\">    url : string = <span class=\"string\">'/compose'</span></div><div class=\"line\">    method : string = <span class=\"string\">'post'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"></p>\n"},{"layout":"default","id":"index","title":"koa-cola是什么?","next":"ssr.html","_content":"\nkoa-cola是一个基于koa和react的服务器端SSR(server side render)和浏览器端的SPA(single page application)的web前后端全栈应用框架。\n\nkoa-cola使用typescript开发，使用d-mvc（es7 decorator风格的mvc）开发模式。另外koa-cola大量使用universal (\"isomorphic\") 开发模式，比如react技术栈完全前后端universal（server端和client端均可以使用同一套component、react-redux、react-router）。\n\nkoa-cola的开发风格受[sails](http://sailsjs.com/)影响，之前使用过sails开发过大型的web应用，深受其[约定优先配置](https://en.wikipedia.org/wiki/Convention_over_configuration)的开发模式影响。\n\n* SSR+SPA的完整方案，只需要一份react代码便可以实现：服务器端渲染＋浏览器端bundle实现的交互\n* 使用koa作为web服务（使用node8可以使用最新的v8高性能原生使用async/await）\n* 使用typescript开发\n* 使用完整的react技术栈(包括react-router和react-redux)\n* react相关代码前后端复用(包括component渲染、react-router和react-redux)","source":"index.md","raw":"---\nlayout: default\nid: index\ntitle: koa-cola是什么?\nnext: ssr.html\n---\n\nkoa-cola是一个基于koa和react的服务器端SSR(server side render)和浏览器端的SPA(single page application)的web前后端全栈应用框架。\n\nkoa-cola使用typescript开发，使用d-mvc（es7 decorator风格的mvc）开发模式。另外koa-cola大量使用universal (\"isomorphic\") 开发模式，比如react技术栈完全前后端universal（server端和client端均可以使用同一套component、react-redux、react-router）。\n\nkoa-cola的开发风格受[sails](http://sailsjs.com/)影响，之前使用过sails开发过大型的web应用，深受其[约定优先配置](https://en.wikipedia.org/wiki/Convention_over_configuration)的开发模式影响。\n\n* SSR+SPA的完整方案，只需要一份react代码便可以实现：服务器端渲染＋浏览器端bundle实现的交互\n* 使用koa作为web服务（使用node8可以使用最新的v8高性能原生使用async/await）\n* 使用typescript开发\n* 使用完整的react技术栈(包括react-router和react-redux)\n* react相关代码前后端复用(包括component渲染、react-router和react-redux)","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"index.html","comments":1,"_id":"cj6hhl3g800092mvguz9uzkjh","content":"<p>koa-cola是一个基于koa和react的服务器端SSR(server side render)和浏览器端的SPA(single page application)的web前后端全栈应用框架。</p>\n<p>koa-cola使用typescript开发，使用d-mvc（es7 decorator风格的mvc）开发模式。另外koa-cola大量使用universal (&quot;isomorphic&quot;) 开发模式，比如react技术栈完全前后端universal（server端和client端均可以使用同一套component、react-redux、react-router）。</p>\n<p>koa-cola的开发风格受<a href=\"http://sailsjs.com/\" target=\"_blank\" rel=\"external\">sails</a>影响，之前使用过sails开发过大型的web应用，深受其<a href=\"https://en.wikipedia.org/wiki/Convention_over_configuration\" target=\"_blank\" rel=\"external\">约定优先配置</a>的开发模式影响。</p>\n<ul>\n<li>SSR+SPA的完整方案，只需要一份react代码便可以实现：服务器端渲染＋浏览器端bundle实现的交互</li>\n<li>使用koa作为web服务（使用node8可以使用最新的v8高性能原生使用async/await）</li>\n<li>使用typescript开发</li>\n<li>使用完整的react技术栈(包括react-router和react-redux)</li>\n<li>react相关代码前后端复用(包括component渲染、react-router和react-redux)</li>\n</ul>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola是一个基于koa和react的服务器端SSR(server side render)和浏览器端的SPA(single page application)的web前后端全栈应用框架。</p>\n<p>koa-cola使用typescript开发，使用d-mvc（es7 decorator风格的mvc）开发模式。另外koa-cola大量使用universal (&quot;isomorphic&quot;) 开发模式，比如react技术栈完全前后端universal（server端和client端均可以使用同一套component、react-redux、react-router）。</p>\n<p>koa-cola的开发风格受<a href=\"http://sailsjs.com/\" target=\"_blank\" rel=\"external\">sails</a>影响，之前使用过sails开发过大型的web应用，深受其<a href=\"https://en.wikipedia.org/wiki/Convention_over_configuration\" target=\"_blank\" rel=\"external\">约定优先配置</a>的开发模式影响。</p>\n<ul>\n<li>SSR+SPA的完整方案，只需要一份react代码便可以实现：服务器端渲染＋浏览器端bundle实现的交互</li>\n<li>使用koa作为web服务（使用node8可以使用最新的v8高性能原生使用async/await）</li>\n<li>使用typescript开发</li>\n<li>使用完整的react技术栈(包括react-router和react-redux)</li>\n<li>react相关代码前后端复用(包括component渲染、react-router和react-redux)</li>\n</ul>\n"},{"layout":"default","id":"installation","title":"如何使用","prev":"d-mvc.html","next":"cli.html","_content":"\n\nkoa-cola支持node.js的版本包括7.6和8，建议使用8，因为8.0使用的最新的v8版本，而且8.0会在[今年10月正式激活LTS](https://github.com/nodejs/LTS)，因为koa-cola的async/await是原生方式使用没有经过transform，所以不支持node7.6以下的node版本。\n\n* `npm i koa-cola ts-node -g` 安装全局koa-cola和ts-node\n* `koa-cola new koa-cola-app` 在当前文件夹创建名字为app的新koa-cola项目，创建完整的目录结构，并自动安装依赖\n* `cd koa-cola-app`\n* `koa-cola dev` dev模式启动，build webpack bundle、launch项目、并自动打开浏览器\n\n视频演示：\n\n<a href=\"http://www.koa-cola.com/doc/video/koa-cola-dev.mp4\" target=\"_blank\"><img src=\"http://www.koa-cola.com/doc/video/poster.png\" width=\"500\" /></a>\n\n\n","source":"installation.md","raw":"---\nlayout: default\nid: installation\ntitle: 如何使用\nprev: d-mvc.html\nnext: cli.html\n---\n\n\nkoa-cola支持node.js的版本包括7.6和8，建议使用8，因为8.0使用的最新的v8版本，而且8.0会在[今年10月正式激活LTS](https://github.com/nodejs/LTS)，因为koa-cola的async/await是原生方式使用没有经过transform，所以不支持node7.6以下的node版本。\n\n* `npm i koa-cola ts-node -g` 安装全局koa-cola和ts-node\n* `koa-cola new koa-cola-app` 在当前文件夹创建名字为app的新koa-cola项目，创建完整的目录结构，并自动安装依赖\n* `cd koa-cola-app`\n* `koa-cola dev` dev模式启动，build webpack bundle、launch项目、并自动打开浏览器\n\n视频演示：\n\n<a href=\"http://www.koa-cola.com/doc/video/koa-cola-dev.mp4\" target=\"_blank\"><img src=\"http://www.koa-cola.com/doc/video/poster.png\" width=\"500\" /></a>\n\n\n","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"installation.html","comments":1,"_id":"cj6hhl3g8000a2mvg3yucojms","content":"<p>koa-cola支持node.js的版本包括7.6和8，建议使用8，因为8.0使用的最新的v8版本，而且8.0会在<a href=\"https://github.com/nodejs/LTS\" target=\"_blank\" rel=\"external\">今年10月正式激活LTS</a>，因为koa-cola的async/await是原生方式使用没有经过transform，所以不支持node7.6以下的node版本。</p>\n<ul>\n<li><code>npm i koa-cola ts-node -g</code> 安装全局koa-cola和ts-node</li>\n<li><code>koa-cola new koa-cola-app</code> 在当前文件夹创建名字为app的新koa-cola项目，创建完整的目录结构，并自动安装依赖</li>\n<li><code>cd koa-cola-app</code></li>\n<li><code>koa-cola dev</code> dev模式启动，build webpack bundle、launch项目、并自动打开浏览器</li>\n</ul>\n<p>视频演示：</p>\n<p><a href=\"http://www.koa-cola.com/doc/video/koa-cola-dev.mp4\" target=\"_blank\"><img src=\"http://www.koa-cola.com/doc/video/poster.png\" width=\"500\"></a></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola支持node.js的版本包括7.6和8，建议使用8，因为8.0使用的最新的v8版本，而且8.0会在<a href=\"https://github.com/nodejs/LTS\" target=\"_blank\" rel=\"external\">今年10月正式激活LTS</a>，因为koa-cola的async/await是原生方式使用没有经过transform，所以不支持node7.6以下的node版本。</p>\n<ul>\n<li><code>npm i koa-cola ts-node -g</code> 安装全局koa-cola和ts-node</li>\n<li><code>koa-cola new koa-cola-app</code> 在当前文件夹创建名字为app的新koa-cola项目，创建完整的目录结构，并自动安装依赖</li>\n<li><code>cd koa-cola-app</code></li>\n<li><code>koa-cola dev</code> dev模式启动，build webpack bundle、launch项目、并自动打开浏览器</li>\n</ul>\n<p>视频演示：</p>\n<p><a href=\"http://www.koa-cola.com/doc/video/koa-cola-dev.mp4\" target=\"_blank\"><img src=\"http://www.koa-cola.com/doc/video/poster.png\" width=\"500\"></a></p>\n"},{"layout":"default","id":"public","title":"public","prev":"config-env.html","next":"views.html","_content":"\nkoa-cola默认的静态文件目录在public目录下，webpack默认的配置也是输出bundle到public目录，如果需要修改目录位置则需要修改koa中间件的配置。\n\n在api/middlewares添加koa-static：\n\n```javascript\nexport default function koaStatic (){\n    return require('koa-static')('path/to/static')\n}\n```\n\n然后在config下新建middlewares.js:\n\n```javascript\nmodule.exports = {\n\tmiddlewares : {\n\t\t'koa-static' : true\n\t}\n};\n```","source":"public.md","raw":"---\nlayout: default\nid: public\ntitle: public\nprev: config-env.html\nnext: views.html\n---\n\nkoa-cola默认的静态文件目录在public目录下，webpack默认的配置也是输出bundle到public目录，如果需要修改目录位置则需要修改koa中间件的配置。\n\n在api/middlewares添加koa-static：\n\n```javascript\nexport default function koaStatic (){\n    return require('koa-static')('path/to/static')\n}\n```\n\n然后在config下新建middlewares.js:\n\n```javascript\nmodule.exports = {\n\tmiddlewares : {\n\t\t'koa-static' : true\n\t}\n};\n```","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"public.html","comments":1,"_id":"cj6hhl3g8000b2mvg0nz2rfc1","content":"<p>koa-cola默认的静态文件目录在public目录下，webpack默认的配置也是输出bundle到public目录，如果需要修改目录位置则需要修改koa中间件的配置。</p>\n<p>在api/middlewares添加koa-static：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">koaStatic</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)(<span class=\"string\">'path/to/static'</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在config下新建middlewares.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">\tmiddlewares : &#123;</div><div class=\"line\">\t\t<span class=\"string\">'koa-static'</span> : <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola默认的静态文件目录在public目录下，webpack默认的配置也是输出bundle到public目录，如果需要修改目录位置则需要修改koa中间件的配置。</p>\n<p>在api/middlewares添加koa-static：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">koaStatic</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)(<span class=\"string\">'path/to/static'</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在config下新建middlewares.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">\tmiddlewares : &#123;</div><div class=\"line\">\t\t<span class=\"string\">'koa-static'</span> : <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"ssr","title":"SSR和SPA","prev":"index.html","next":"compare-next.html","_content":"\nkoa-cola是一个包括前后端全栈的框架。\n\n在服务器端，支持以react作为组件模板的方式直接渲染到浏览器端的SSR（Server Side Render）的架构。\n\n在浏览器端，支持react-router的bundle的SPA(Single Page Application）架构。\n\nSSR和SPA各有优缺点，SPA通过浏览器端router控制页面的跳转，交互体验更友好，但是对于搜索引擎不友好，所以支持SSR是无可避免的，对于开发者，开发koa-cola应用，不需要在写代码时候关心这段代码到底是SSR直渲还是SPA的异步，你只需要关心业务逻辑，koa-cola会帮助你解决代码在不同的环境运行。\n\n```javascript\n@asyncConnect([\n  {\n    key: 'some_data',\n    promise: async ({ params, helpers}) => {\n      return await fetch('/some/data/api');\n    }\n  }\n])\nclass Index extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.some_data}\n    </div>;\n  }\n}\nexport default Index;\n```\n 上面这段是koa-cola项目里面使用了asyncConnect的装饰器来初始化数据。\n \n * 当刷新页面，需要SSR方式直渲Index页面时，服务器端会通过fetch获取数据，然后再渲染出来html。\n * 当在其他页面点击了<link>的react组件时，浏览器端则会通过router找到这个组件，然后在浏览器端使用fetch方法异步获取数据，然后重新在浏览器端渲染页面，这就是SPA方式。\n\n fetch是一个前后端均可支持的“universal”库，在koa-cola，开发者不但可以前后端使用数据请求接口fetch，甚至可以前后端使用router和redux，和部分组件(在服务器端react组件只支持render之前的生命周期)。\n","source":"ssr.md","raw":"---\nlayout: default\nid: ssr\ntitle: SSR和SPA\nprev: index.html\nnext: compare-next.html\n---\n\nkoa-cola是一个包括前后端全栈的框架。\n\n在服务器端，支持以react作为组件模板的方式直接渲染到浏览器端的SSR（Server Side Render）的架构。\n\n在浏览器端，支持react-router的bundle的SPA(Single Page Application）架构。\n\nSSR和SPA各有优缺点，SPA通过浏览器端router控制页面的跳转，交互体验更友好，但是对于搜索引擎不友好，所以支持SSR是无可避免的，对于开发者，开发koa-cola应用，不需要在写代码时候关心这段代码到底是SSR直渲还是SPA的异步，你只需要关心业务逻辑，koa-cola会帮助你解决代码在不同的环境运行。\n\n```javascript\n@asyncConnect([\n  {\n    key: 'some_data',\n    promise: async ({ params, helpers}) => {\n      return await fetch('/some/data/api');\n    }\n  }\n])\nclass Index extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.some_data}\n    </div>;\n  }\n}\nexport default Index;\n```\n 上面这段是koa-cola项目里面使用了asyncConnect的装饰器来初始化数据。\n \n * 当刷新页面，需要SSR方式直渲Index页面时，服务器端会通过fetch获取数据，然后再渲染出来html。\n * 当在其他页面点击了<link>的react组件时，浏览器端则会通过router找到这个组件，然后在浏览器端使用fetch方法异步获取数据，然后重新在浏览器端渲染页面，这就是SPA方式。\n\n fetch是一个前后端均可支持的“universal”库，在koa-cola，开发者不但可以前后端使用数据请求接口fetch，甚至可以前后端使用router和redux，和部分组件(在服务器端react组件只支持render之前的生命周期)。\n","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"ssr.html","comments":1,"_id":"cj6hhl3g9000c2mvgkdbh9y2l","content":"<p>koa-cola是一个包括前后端全栈的框架。</p>\n<p>在服务器端，支持以react作为组件模板的方式直接渲染到浏览器端的SSR（Server Side Render）的架构。</p>\n<p>在浏览器端，支持react-router的bundle的SPA(Single Page Application）架构。</p>\n<p>SSR和SPA各有优缺点，SPA通过浏览器端router控制页面的跳转，交互体验更友好，但是对于搜索引擎不友好，所以支持SSR是无可避免的，对于开发者，开发koa-cola应用，不需要在写代码时候关心这段代码到底是SSR直渲还是SPA的异步，你只需要关心业务逻辑，koa-cola会帮助你解决代码在不同的环境运行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'some_data'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/some/data/api'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.some_data&#125;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index;</div></pre></td></tr></table></figure>\n<p>上面这段是koa-cola项目里面使用了asyncConnect的装饰器来初始化数据。</p>\n<ul>\n<li>当刷新页面，需要SSR方式直渲Index页面时，服务器端会通过fetch获取数据，然后再渲染出来html。</li>\n<li>当在其他页面点击了<link>的react组件时，浏览器端则会通过router找到这个组件，然后在浏览器端使用fetch方法异步获取数据，然后重新在浏览器端渲染页面，这就是SPA方式。</li>\n</ul>\n<p>fetch是一个前后端均可支持的“universal”库，在koa-cola，开发者不但可以前后端使用数据请求接口fetch，甚至可以前后端使用router和redux，和部分组件(在服务器端react组件只支持render之前的生命周期)。</p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola是一个包括前后端全栈的框架。</p>\n<p>在服务器端，支持以react作为组件模板的方式直接渲染到浏览器端的SSR（Server Side Render）的架构。</p>\n<p>在浏览器端，支持react-router的bundle的SPA(Single Page Application）架构。</p>\n<p>SSR和SPA各有优缺点，SPA通过浏览器端router控制页面的跳转，交互体验更友好，但是对于搜索引擎不友好，所以支持SSR是无可避免的，对于开发者，开发koa-cola应用，不需要在写代码时候关心这段代码到底是SSR直渲还是SPA的异步，你只需要关心业务逻辑，koa-cola会帮助你解决代码在不同的环境运行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'some_data'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/some/data/api'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.some_data&#125;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index;</div></pre></td></tr></table></figure>\n<p>上面这段是koa-cola项目里面使用了asyncConnect的装饰器来初始化数据。</p>\n<ul>\n<li>当刷新页面，需要SSR方式直渲Index页面时，服务器端会通过fetch获取数据，然后再渲染出来html。</li>\n<li>当在其他页面点击了<link>的react组件时，浏览器端则会通过router找到这个组件，然后在浏览器端使用fetch方法异步获取数据，然后重新在浏览器端渲染页面，这就是SPA方式。</li>\n</ul>\n<p>fetch是一个前后端均可支持的“universal”库，在koa-cola，开发者不但可以前后端使用数据请求接口fetch，甚至可以前后端使用router和redux，和部分组件(在服务器端react组件只支持render之前的生命周期)。</p>\n"},{"layout":"default","id":"tip1-react-init","title":"初始化react组件数据","next":"tip2-redux.html","_content":"\nkoa-cola提供两种方式初始化react。\n\n## 在controller里面初始化\n\n初始化数据，数据将会注入到react组件的props.ctrl，如：this.props.ctrl.foo\n\n```javascript\nconst { Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response } = require('koa-cola').Decorators.controller;\n@Controller('') \nclass FooController {\n    @Get('/some_page')  \n    @View('some_page') // some_page是普通react组件\n    async some_page (@Ctx() ctx, @QueryParam() param : any) { \n        // 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo\n        return await Promise.resolve({\n            foo : 'bar'\n        });\n    }\n}\n```\n\n## 在redux-connect封装的react组件初始化数据\n```javascript\nconst {asyncConnect} = require('koa-cola').Decorators.view;\n\n// 变量描述\nexport interface Props {\n    foo: string;   \n}\nexport interface States {}\n\n@asyncConnect([\n  {\n    key: 'foo',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n        return await Promise.resolve('bar');\n    }\n  }\n])\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>{this.props.foo}</div>;\n  }\n}\nexport default Some_Page;\n```\n\n这两种方式的区别是：\n\n第一种方式：\n* 只会在服务器端进行初始化\n* 只支持非react-redux或者redux-connect封装的组件\n* 因为只会在服务器端进行初始化，所以可以支持任何获取数据的方式比如数据库获取\n\n第二种方式：\n* 服务器端和浏览器端都支持（服务器端就是SSR，浏览器端就是异步获取数据）\n* redux-connect封装的组件\n* 因为服务器端和浏览器端都支持初始化，所以数据的获取必须前后端Universal，比如使用axios库","source":"tip1-react-init.md","raw":"---\nlayout: default\nid: tip1-react-init\ntitle: 初始化react组件数据\nnext: tip2-redux.html\n---\n\nkoa-cola提供两种方式初始化react。\n\n## 在controller里面初始化\n\n初始化数据，数据将会注入到react组件的props.ctrl，如：this.props.ctrl.foo\n\n```javascript\nconst { Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response } = require('koa-cola').Decorators.controller;\n@Controller('') \nclass FooController {\n    @Get('/some_page')  \n    @View('some_page') // some_page是普通react组件\n    async some_page (@Ctx() ctx, @QueryParam() param : any) { \n        // 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo\n        return await Promise.resolve({\n            foo : 'bar'\n        });\n    }\n}\n```\n\n## 在redux-connect封装的react组件初始化数据\n```javascript\nconst {asyncConnect} = require('koa-cola').Decorators.view;\n\n// 变量描述\nexport interface Props {\n    foo: string;   \n}\nexport interface States {}\n\n@asyncConnect([\n  {\n    key: 'foo',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n        return await Promise.resolve('bar');\n    }\n  }\n])\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>{this.props.foo}</div>;\n  }\n}\nexport default Some_Page;\n```\n\n这两种方式的区别是：\n\n第一种方式：\n* 只会在服务器端进行初始化\n* 只支持非react-redux或者redux-connect封装的组件\n* 因为只会在服务器端进行初始化，所以可以支持任何获取数据的方式比如数据库获取\n\n第二种方式：\n* 服务器端和浏览器端都支持（服务器端就是SSR，浏览器端就是异步获取数据）\n* redux-connect封装的组件\n* 因为服务器端和浏览器端都支持初始化，所以数据的获取必须前后端Universal，比如使用axios库","date":"2017-08-18T08:11:49.000Z","updated":"2017-08-18T08:11:49.000Z","path":"tip1-react-init.html","_id":"cj6hhl3g9000d2mvggmgfbmbn","comments":1,"content":"<p>koa-cola提供两种方式初始化react。</p>\n<h2>在controller里面初始化</h2>\n<p>初始化数据，数据将会注入到react组件的props.ctrl，如：this.props.ctrl.foo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.controller;</div><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/some_page'</span>)  </div><div class=\"line\">    @View(<span class=\"string\">'some_page'</span>) <span class=\"comment\">// some_page是普通react组件</span></div><div class=\"line\">    <span class=\"keyword\">async</span> some_page (@Ctx() ctx, @QueryParam() param : any) &#123; </div><div class=\"line\">        <span class=\"comment\">// 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(&#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2>在redux-connect封装的react组件初始化数据</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;asyncConnect&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 变量描述</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface Props &#123;</div><div class=\"line\">    foo: string;   </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> interface States &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.props.foo&#125;&lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n<p>这两种方式的区别是：</p>\n<p>第一种方式：</p>\n<ul>\n<li>只会在服务器端进行初始化</li>\n<li>只支持非react-redux或者redux-connect封装的组件</li>\n<li>因为只会在服务器端进行初始化，所以可以支持任何获取数据的方式比如数据库获取</li>\n</ul>\n<p>第二种方式：</p>\n<ul>\n<li>服务器端和浏览器端都支持（服务器端就是SSR，浏览器端就是异步获取数据）</li>\n<li>redux-connect封装的组件</li>\n<li>因为服务器端和浏览器端都支持初始化，所以数据的获取必须前后端Universal，比如使用axios库</li>\n</ul>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola提供两种方式初始化react。</p>\n<h2>在controller里面初始化</h2>\n<p>初始化数据，数据将会注入到react组件的props.ctrl，如：this.props.ctrl.foo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.controller;</div><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/some_page'</span>)  </div><div class=\"line\">    @View(<span class=\"string\">'some_page'</span>) <span class=\"comment\">// some_page是普通react组件</span></div><div class=\"line\">    <span class=\"keyword\">async</span> some_page (@Ctx() ctx, @QueryParam() param : any) &#123; </div><div class=\"line\">        <span class=\"comment\">// 初始化数据，数据将会注入到react组件的props，如：this.props.ctrl.foo</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(&#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2>在redux-connect封装的react组件初始化数据</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;asyncConnect&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 变量描述</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface Props &#123;</div><div class=\"line\">    foo: string;   </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> interface States &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.props.foo&#125;&lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n<p>这两种方式的区别是：</p>\n<p>第一种方式：</p>\n<ul>\n<li>只会在服务器端进行初始化</li>\n<li>只支持非react-redux或者redux-connect封装的组件</li>\n<li>因为只会在服务器端进行初始化，所以可以支持任何获取数据的方式比如数据库获取</li>\n</ul>\n<p>第二种方式：</p>\n<ul>\n<li>服务器端和浏览器端都支持（服务器端就是SSR，浏览器端就是异步获取数据）</li>\n<li>redux-connect封装的组件</li>\n<li>因为服务器端和浏览器端都支持初始化，所以数据的获取必须前后端Universal，比如使用axios库</li>\n</ul>\n"},{"layout":"default","id":"tip4-cluster","title":"cluster集群模式","prev":"tip3-inject-global.html","next":"tip5-debug.html","_content":"\n如果你想使用cluster模式，koa-cola提供了pm2的配置文件，使用cli新建项目时候会生成这个配置文件，启动方式使用：`pm2 start pm2.config.js`","source":"tip4-cluster.md","raw":"---\nlayout: default\nid: tip4-cluster\ntitle: cluster集群模式\nprev: tip3-inject-global.html\nnext: tip5-debug.html\n---\n\n如果你想使用cluster模式，koa-cola提供了pm2的配置文件，使用cli新建项目时候会生成这个配置文件，启动方式使用：`pm2 start pm2.config.js`","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"tip4-cluster.html","comments":1,"_id":"cj6hhl3g9000e2mvgokb5sy8a","content":"<p>如果你想使用cluster模式，koa-cola提供了pm2的配置文件，使用cli新建项目时候会生成这个配置文件，启动方式使用：<code>pm2 start pm2.config.js</code></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>如果你想使用cluster模式，koa-cola提供了pm2的配置文件，使用cli新建项目时候会生成这个配置文件，启动方式使用：<code>pm2 start pm2.config.js</code></p>\n"},{"layout":"default","id":"tip2-redux","title":"redux-connect组件的redux坑","prev":"tip1-react-init.html","next":"tip3-inject-global.html","_content":"\n\n使用redux-connect进行数据初始化，如果这个key和自定义的mapStateToProps的props属性有冲突，那么key定义的数据将会更优先\n\n下面例子，定义了初始化的props属性foo，然后mapStateToProps也定义了返回的props.foo的新value，但是，其实dispatch后props.foo还是最开始的\"bar\"，而不是\"bar again\"。\n\n```javascript\nconst {asyncConnect, colaReducer, store} = require('koa-cola').Decorators.view;\n@asyncConnect([\n  {\n    key: 'foo',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n        return await Promise.resolve('bar');\n    }\n  }\n], // mapStateToProps\n({ fooState }) => {\n    return {\n        foo : fooState\n    };\n}, dispatch => {\n    return {\n        changeFoo: () => {\n            dispatch({\n                type: 'CHANGE_FOO'\n            });\n        }\n    };\n})\n@colaReducer({\n    fooState : (state = '', action) => {\n        switch (action.type) {\n            case 'CHANGE_FOO':\n                return 'bar again';\n            default:\n                return state;\n        }\n    }\n})\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.foo}\n        <button onClick={() => this.props.changeFoo()}>change foo</button>\n    </div>;\n  }\n}\nexport default Some_Page;\n```\n\n如果必须要修改props.foo，可以使用下面的方法。\n\n```javascript\nconst loadSuccess = store.loadSuccess;\n...\n...\nchangeFoo: () => {\n    dispatch(loadSuccess('foo', 'bar again'));\n}\n```","source":"tip2-redux.md","raw":"---\nlayout: default\nid: tip2-redux\ntitle: redux-connect组件的redux坑\nprev: tip1-react-init.html\nnext: tip3-inject-global.html\n---\n\n\n使用redux-connect进行数据初始化，如果这个key和自定义的mapStateToProps的props属性有冲突，那么key定义的数据将会更优先\n\n下面例子，定义了初始化的props属性foo，然后mapStateToProps也定义了返回的props.foo的新value，但是，其实dispatch后props.foo还是最开始的\"bar\"，而不是\"bar again\"。\n\n```javascript\nconst {asyncConnect, colaReducer, store} = require('koa-cola').Decorators.view;\n@asyncConnect([\n  {\n    key: 'foo',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n        return await Promise.resolve('bar');\n    }\n  }\n], // mapStateToProps\n({ fooState }) => {\n    return {\n        foo : fooState\n    };\n}, dispatch => {\n    return {\n        changeFoo: () => {\n            dispatch({\n                type: 'CHANGE_FOO'\n            });\n        }\n    };\n})\n@colaReducer({\n    fooState : (state = '', action) => {\n        switch (action.type) {\n            case 'CHANGE_FOO':\n                return 'bar again';\n            default:\n                return state;\n        }\n    }\n})\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.foo}\n        <button onClick={() => this.props.changeFoo()}>change foo</button>\n    </div>;\n  }\n}\nexport default Some_Page;\n```\n\n如果必须要修改props.foo，可以使用下面的方法。\n\n```javascript\nconst loadSuccess = store.loadSuccess;\n...\n...\nchangeFoo: () => {\n    dispatch(loadSuccess('foo', 'bar again'));\n}\n```","date":"2017-08-18T06:10:23.000Z","updated":"2017-08-18T06:10:23.000Z","path":"tip2-redux.html","comments":1,"_id":"cj6hhl3ga000f2mvgo0hgx52y","content":"<p>使用redux-connect进行数据初始化，如果这个key和自定义的mapStateToProps的props属性有冲突，那么key定义的数据将会更优先</p>\n<p>下面例子，定义了初始化的props属性foo，然后mapStateToProps也定义了返回的props.foo的新value，但是，其实dispatch后props.foo还是最开始的&quot;bar&quot;，而不是&quot;bar again&quot;。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;asyncConnect, colaReducer, store&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">], <span class=\"comment\">// mapStateToProps</span></div><div class=\"line\">(&#123; fooState &#125;) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        foo : fooState</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;, dispatch =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            dispatch(&#123;</div><div class=\"line\">                type: <span class=\"string\">'CHANGE_FOO'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div><div class=\"line\">@colaReducer(&#123;</div><div class=\"line\">    fooState : <span class=\"function\">(<span class=\"params\">state = <span class=\"string\">''</span>, action</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'CHANGE_FOO'</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">'bar again'</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> state;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.foo&#125;</div><div class=\"line\">        &lt;button onClick=&#123;() =&gt; this.props.changeFoo()&#125;&gt;change foo&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n<p>如果必须要修改props.foo，可以使用下面的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> loadSuccess = store.loadSuccess;</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    dispatch(loadSuccess(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar again'</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>使用redux-connect进行数据初始化，如果这个key和自定义的mapStateToProps的props属性有冲突，那么key定义的数据将会更优先</p>\n<p>下面例子，定义了初始化的props属性foo，然后mapStateToProps也定义了返回的props.foo的新value，但是，其实dispatch后props.foo还是最开始的&quot;bar&quot;，而不是&quot;bar again&quot;。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;asyncConnect, colaReducer, store&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">], <span class=\"comment\">// mapStateToProps</span></div><div class=\"line\">(&#123; fooState &#125;) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        foo : fooState</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;, dispatch =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            dispatch(&#123;</div><div class=\"line\">                type: <span class=\"string\">'CHANGE_FOO'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div><div class=\"line\">@colaReducer(&#123;</div><div class=\"line\">    fooState : <span class=\"function\">(<span class=\"params\">state = <span class=\"string\">''</span>, action</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'CHANGE_FOO'</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">'bar again'</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> state;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.foo&#125;</div><div class=\"line\">        &lt;button onClick=&#123;() =&gt; this.props.changeFoo()&#125;&gt;change foo&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n<p>如果必须要修改props.foo，可以使用下面的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> loadSuccess = store.loadSuccess;</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    dispatch(loadSuccess(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar again'</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"tip3-inject-global","title":"Inject global全局注入","prev":"tip2-redux.html","next":"tip4-cluster.html","_content":"\n全局依赖注入，有时候在其他非应用运行时引用koa-cola里面的文件时，会因为文件依赖`app.xxx`而出错，使用inject global方式，可以实现第三方非koa-cola的require。\n```javascript\nimport { reqInject } from 'koa-cola'\nlet user;\nreqInject(function(){\n    user = require('./api/models/user').default // 直接require项目内的文件\n    let config = app.config; // 或者app当前配置\n});\n```","source":"tip3-inject-global.md","raw":"---\nlayout: default\nid: tip3-inject-global\ntitle: Inject global全局注入\nprev: tip2-redux.html\nnext: tip4-cluster.html\n---\n\n全局依赖注入，有时候在其他非应用运行时引用koa-cola里面的文件时，会因为文件依赖`app.xxx`而出错，使用inject global方式，可以实现第三方非koa-cola的require。\n```javascript\nimport { reqInject } from 'koa-cola'\nlet user;\nreqInject(function(){\n    user = require('./api/models/user').default // 直接require项目内的文件\n    let config = app.config; // 或者app当前配置\n});\n```","date":"2017-08-18T06:10:57.000Z","updated":"2017-08-18T06:10:57.000Z","path":"tip3-inject-global.html","comments":1,"_id":"cj6hhl3ga000g2mvgrgc3b96a","content":"<p>全局依赖注入，有时候在其他非应用运行时引用koa-cola里面的文件时，会因为文件依赖<code>app.xxx</code>而出错，使用inject global方式，可以实现第三方非koa-cola的require。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; reqInject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">let</span> user;</div><div class=\"line\">reqInject(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    user = <span class=\"built_in\">require</span>(<span class=\"string\">'./api/models/user'</span>).default <span class=\"comment\">// 直接require项目内的文件</span></div><div class=\"line\">    <span class=\"keyword\">let</span> config = app.config; <span class=\"comment\">// 或者app当前配置</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>全局依赖注入，有时候在其他非应用运行时引用koa-cola里面的文件时，会因为文件依赖<code>app.xxx</code>而出错，使用inject global方式，可以实现第三方非koa-cola的require。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; reqInject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">let</span> user;</div><div class=\"line\">reqInject(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    user = <span class=\"built_in\">require</span>(<span class=\"string\">'./api/models/user'</span>).default <span class=\"comment\">// 直接require项目内的文件</span></div><div class=\"line\">    <span class=\"keyword\">let</span> config = app.config; <span class=\"comment\">// 或者app当前配置</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"layout":"default","id":"tip5-debug","title":"调试","prev":"tip4-cluster.html","next":"tip6-compile.html","_content":"\n如果需要调试koa-cola项目，需要添加两个依赖`npm i ts-node typescript -S`，然后在vscode新建调试配置：\n\n```json\n{\n    \"name\": \"DebugApp\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceRoot}/node_modules/ts-node/dist/_bin.js\",\n    \"stopOnEntry\": false,\n    \"args\": [],\n    \"runtimeArgs\": [\n        \"-r\", \"ts-node/register\",\n        \"${workspaceRoot}/app.tsx\"\n    ],\n    \"sourceMaps\": true,\n    \"console\": \"internalConsole\",\n    \"internalConsoleOptions\": \"openOnSessionStart\"\n}\n```\n便可享受vscode的调试ts的乐趣。\n\n另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试：\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"/>","source":"tip5-debug.md","raw":"---\nlayout: default\nid: tip5-debug\ntitle: 调试\nprev: tip4-cluster.html\nnext: tip6-compile.html\n---\n\n如果需要调试koa-cola项目，需要添加两个依赖`npm i ts-node typescript -S`，然后在vscode新建调试配置：\n\n```json\n{\n    \"name\": \"DebugApp\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceRoot}/node_modules/ts-node/dist/_bin.js\",\n    \"stopOnEntry\": false,\n    \"args\": [],\n    \"runtimeArgs\": [\n        \"-r\", \"ts-node/register\",\n        \"${workspaceRoot}/app.tsx\"\n    ],\n    \"sourceMaps\": true,\n    \"console\": \"internalConsole\",\n    \"internalConsoleOptions\": \"openOnSessionStart\"\n}\n```\n便可享受vscode的调试ts的乐趣。\n\n另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试：\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"/>","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"tip5-debug.html","comments":1,"_id":"cj6hhl3gb000h2mvg1z238pi0","content":"<p>如果需要调试koa-cola项目，需要添加两个依赖<code>npm i ts-node typescript -S</code>，然后在vscode新建调试配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"DebugApp\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/node_modules/ts-node/dist/_bin.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">\"args\"</span>: [],</div><div class=\"line\">    <span class=\"attr\">\"runtimeArgs\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"-r\"</span>, <span class=\"string\">\"ts-node/register\"</span>,</div><div class=\"line\">        <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.tsx\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"sourceMaps\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"console\"</span>: <span class=\"string\">\"internalConsole\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"internalConsoleOptions\"</span>: <span class=\"string\">\"openOnSessionStart\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>便可享受vscode的调试ts的乐趣。</p>\n<p>另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试：</p>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>如果需要调试koa-cola项目，需要添加两个依赖<code>npm i ts-node typescript -S</code>，然后在vscode新建调试配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"DebugApp\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/node_modules/ts-node/dist/_bin.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">\"args\"</span>: [],</div><div class=\"line\">    <span class=\"attr\">\"runtimeArgs\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"-r\"</span>, <span class=\"string\">\"ts-node/register\"</span>,</div><div class=\"line\">        <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.tsx\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"sourceMaps\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"console\"</span>: <span class=\"string\">\"internalConsole\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"internalConsoleOptions\"</span>: <span class=\"string\">\"openOnSessionStart\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>便可享受vscode的调试ts的乐趣。</p>\n<p>另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试：</p>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"></p>\n"},{"layout":"default","id":"tip6-compile","title":"代码编译","prev":"tip5-debug.html","_content":"\n\n### 客户端\n前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成[webpack配置](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)\nts文件的loader使用了[awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader)，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。\n\nwebpack的入口tsx文件在项目里面的`view/app.tsx`:\n```javascript\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport IndexController from '../api/controllers/IndexController';\n// 以下是3个view(react component)的入口。\nimport index from './pages/index';\nimport officialDemo from './pages/officialDemo';\nimport colastyleDemo from './pages/colastyleDemo';\n\nconst { createProvider } = require('koa-cola');\n// 使用koa-cola提供的createProvider会自动建立路由，如果手动使用官方的Provider，则需要开发者手动写router\nconst Provider = createProvider([IndexController], {\n  index,\n  officialDemo,\n  colastyleDemo\n});\n\nrender(<Provider />, document.getElementById('app'));\n```\n\nwepack build 新建默认的项目得到的bundle的大小有400K，依赖的库组成如下图：\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"/>\n\nwebpack的配置文件默认加了四个IgnorePlugin插件，因为有些文件是前后端都会使用，所以需要忽略服务器端的require。\n\n```javascript\n// 以下两个是给服务器端使用，不能打包到webpack\nnew webpack.IgnorePlugin(/\\.\\/src\\/app/),\nnew webpack.IgnorePlugin(/\\.\\/src\\/util\\/injectGlobal/),\n// 以下两个是controller引用的，也是服务器端使用，也不能打包到webpack，如果你的controller也有服务器端使用的库，也必须要加IgnorePlugin插件\nnew webpack.IgnorePlugin(/koa$/),\nnew webpack.IgnorePlugin(/koa-body$/),\n```\n\n\n### 服务器端\nkoa-cola框架\b使用typescript编写，生产环境的代码\b是使用最新的js标准语法(需node7.6及以上)，即只编译代码的`import export`、ts语法，并未编译es6或es7（比如async/await），所以将不支持低版本的node。\n\n如需在低版本node的环境下使用，请您自己修改[typescript编译设置](https://www.typescriptlang.org/docs/handbook/compiler-options.html)，编译koa-cola框架的代码。\n\n如果在node.js 7.6及以上的环境下运行，则可以直接引用，用过ts-node运行（cli运行命令都是使用ts-node），甚至可以直接[线上使用](https://github.com/TypeStrong/ts-node/issues/104)\n","source":"tip6-compile.md","raw":"---\nlayout: default\nid: tip6-compile\ntitle: 代码编译\nprev: tip5-debug.html\n---\n\n\n### 客户端\n前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成[webpack配置](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)\nts文件的loader使用了[awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader)，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。\n\nwebpack的入口tsx文件在项目里面的`view/app.tsx`:\n```javascript\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport IndexController from '../api/controllers/IndexController';\n// 以下是3个view(react component)的入口。\nimport index from './pages/index';\nimport officialDemo from './pages/officialDemo';\nimport colastyleDemo from './pages/colastyleDemo';\n\nconst { createProvider } = require('koa-cola');\n// 使用koa-cola提供的createProvider会自动建立路由，如果手动使用官方的Provider，则需要开发者手动写router\nconst Provider = createProvider([IndexController], {\n  index,\n  officialDemo,\n  colastyleDemo\n});\n\nrender(<Provider />, document.getElementById('app'));\n```\n\nwepack build 新建默认的项目得到的bundle的大小有400K，依赖的库组成如下图：\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"/>\n\nwebpack的配置文件默认加了四个IgnorePlugin插件，因为有些文件是前后端都会使用，所以需要忽略服务器端的require。\n\n```javascript\n// 以下两个是给服务器端使用，不能打包到webpack\nnew webpack.IgnorePlugin(/\\.\\/src\\/app/),\nnew webpack.IgnorePlugin(/\\.\\/src\\/util\\/injectGlobal/),\n// 以下两个是controller引用的，也是服务器端使用，也不能打包到webpack，如果你的controller也有服务器端使用的库，也必须要加IgnorePlugin插件\nnew webpack.IgnorePlugin(/koa$/),\nnew webpack.IgnorePlugin(/koa-body$/),\n```\n\n\n### 服务器端\nkoa-cola框架\b使用typescript编写，生产环境的代码\b是使用最新的js标准语法(需node7.6及以上)，即只编译代码的`import export`、ts语法，并未编译es6或es7（比如async/await），所以将不支持低版本的node。\n\n如需在低版本node的环境下使用，请您自己修改[typescript编译设置](https://www.typescriptlang.org/docs/handbook/compiler-options.html)，编译koa-cola框架的代码。\n\n如果在node.js 7.6及以上的环境下运行，则可以直接引用，用过ts-node运行（cli运行命令都是使用ts-node），甚至可以直接[线上使用](https://github.com/TypeStrong/ts-node/issues/104)\n","date":"2017-08-20T18:57:27.000Z","updated":"2017-08-20T18:57:27.000Z","path":"tip6-compile.html","_id":"cj6hhl3gb000i2mvgdszvr8bg","comments":1,"content":"<h3>客户端</h3>\n<p>前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成<a href=\"https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js\" target=\"_blank\" rel=\"external\">webpack配置</a><br>\nts文件的loader使用了<a href=\"https://github.com/s-panferov/awesome-typescript-loader\" target=\"_blank\" rel=\"external\">awesome-typescript-loader</a>，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。</p>\n<p>webpack的入口tsx文件在项目里面的<code>view/app.tsx</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> IndexController <span class=\"keyword\">from</span> <span class=\"string\">'../api/controllers/IndexController'</span>;</div><div class=\"line\"><span class=\"comment\">// 以下是3个view(react component)的入口。</span></div><div class=\"line\"><span class=\"keyword\">import</span> index <span class=\"keyword\">from</span> <span class=\"string\">'./pages/index'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> officialDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/officialDemo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> colastyleDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/colastyleDemo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; createProvider &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>);</div><div class=\"line\"><span class=\"comment\">// 使用koa-cola提供的createProvider会自动建立路由，如果手动使用官方的Provider，则需要开发者手动写router</span></div><div class=\"line\"><span class=\"keyword\">const</span> Provider = createProvider([IndexController], &#123;</div><div class=\"line\">  index,</div><div class=\"line\">  officialDemo,</div><div class=\"line\">  colastyleDemo</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">render(&lt;Provider /&gt;, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<p>wepack build 新建默认的项目得到的bundle的大小有400K，依赖的库组成如下图：<br>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"></p>\n<p>webpack的配置文件默认加了四个IgnorePlugin插件，因为有些文件是前后端都会使用，所以需要忽略服务器端的require。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下两个是给服务器端使用，不能打包到webpack</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/app/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/util\\/injectGlobal/</span>),</div><div class=\"line\"><span class=\"comment\">// 以下两个是controller引用的，也是服务器端使用，也不能打包到webpack，如果你的controller也有服务器端使用的库，也必须要加IgnorePlugin插件</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa$/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa-body$/</span>),</div></pre></td></tr></table></figure>\n<h3>服务器端</h3>\n<p>koa-cola框架\b使用typescript编写，生产环境的代码\b是使用最新的js标准语法(需node7.6及以上)，即只编译代码的<code>import export</code>、ts语法，并未编译es6或es7（比如async/await），所以将不支持低版本的node。</p>\n<p>如需在低版本node的环境下使用，请您自己修改<a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\" target=\"_blank\" rel=\"external\">typescript编译设置</a>，编译koa-cola框架的代码。</p>\n<p>如果在node.js 7.6及以上的环境下运行，则可以直接引用，用过ts-node运行（cli运行命令都是使用ts-node），甚至可以直接<a href=\"https://github.com/TypeStrong/ts-node/issues/104\" target=\"_blank\" rel=\"external\">线上使用</a></p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h3>客户端</h3>\n<p>前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成<a href=\"https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js\" target=\"_blank\" rel=\"external\">webpack配置</a><br>\nts文件的loader使用了<a href=\"https://github.com/s-panferov/awesome-typescript-loader\" target=\"_blank\" rel=\"external\">awesome-typescript-loader</a>，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。</p>\n<p>webpack的入口tsx文件在项目里面的<code>view/app.tsx</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> IndexController <span class=\"keyword\">from</span> <span class=\"string\">'../api/controllers/IndexController'</span>;</div><div class=\"line\"><span class=\"comment\">// 以下是3个view(react component)的入口。</span></div><div class=\"line\"><span class=\"keyword\">import</span> index <span class=\"keyword\">from</span> <span class=\"string\">'./pages/index'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> officialDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/officialDemo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> colastyleDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/colastyleDemo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; createProvider &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>);</div><div class=\"line\"><span class=\"comment\">// 使用koa-cola提供的createProvider会自动建立路由，如果手动使用官方的Provider，则需要开发者手动写router</span></div><div class=\"line\"><span class=\"keyword\">const</span> Provider = createProvider([IndexController], &#123;</div><div class=\"line\">  index,</div><div class=\"line\">  officialDemo,</div><div class=\"line\">  colastyleDemo</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">render(&lt;Provider /&gt;, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<p>wepack build 新建默认的项目得到的bundle的大小有400K，依赖的库组成如下图：<br>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"></p>\n<p>webpack的配置文件默认加了四个IgnorePlugin插件，因为有些文件是前后端都会使用，所以需要忽略服务器端的require。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下两个是给服务器端使用，不能打包到webpack</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/app/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/util\\/injectGlobal/</span>),</div><div class=\"line\"><span class=\"comment\">// 以下两个是controller引用的，也是服务器端使用，也不能打包到webpack，如果你的controller也有服务器端使用的库，也必须要加IgnorePlugin插件</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa$/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa-body$/</span>),</div></pre></td></tr></table></figure>\n<h3>服务器端</h3>\n<p>koa-cola框架\b使用typescript编写，生产环境的代码\b是使用最新的js标准语法(需node7.6及以上)，即只编译代码的<code>import export</code>、ts语法，并未编译es6或es7（比如async/await），所以将不支持低版本的node。</p>\n<p>如需在低版本node的环境下使用，请您自己修改<a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\" target=\"_blank\" rel=\"external\">typescript编译设置</a>，编译koa-cola框架的代码。</p>\n<p>如果在node.js 7.6及以上的环境下运行，则可以直接引用，用过ts-node运行（cli运行命令都是使用ts-node），甚至可以直接<a href=\"https://github.com/TypeStrong/ts-node/issues/104\" target=\"_blank\" rel=\"external\">线上使用</a></p>\n"},{"layout":"default","id":"universal","title":"Universal 前后端全栈开发","prev":"compare-next.html","next":"d-mvc.html","_content":"\n### 前后端router\n\n通过controller生成server端的react-router，并且也生成client端的react-reduxt的Provider(里面还是封装了react-router)\n\n```javascript\n@Controller('') \nclass FooController {\n    @Get('/')\n    @View('index')\n    index(@Ctx() ctx) {\n        return '<h1>hello koa-cola !</h1>'\n    }\n}\n```\n自动生成的server端的react-router:\n\n```html\n<Router ... >\n    <Route path=\"/\" component={IndexComponent} />\n</Router>\n```\n\n通过react-router的match到对应的route后，再通过Provider，最终渲染出html：\n```html\n<Provider store={store} key=\"provider\">\n    <SomeReduxComponent />\n</Provider>\n```\n\n\nclient端Provider则是:\n```html\n<Provider store={store} key=\"provider\">\n    <Router ... >\n        <Route path=\"/\" component={IndexComponent} />\n    </Router>\n</Provider>\n```\n\n### 前后端redux\n\nkoa-cola集成了react-redux方案\n\nserver端redux:\n\n#### controller返回props+普通react组件\n\nreact组件最终会转换成react-redux组件，在生命周期的render之前，你可以使用redux比如dispatch。\n\n```javascript\n@Get('/view')\n@View('some_view')\nasync view( @Ctx() ctx ) { // controller返回数据传递到react组件的props.ctrl\n    return await Promise.resolve({\n        foo : 'bar'\n    });\n} \n```\n\nreact组件：\n\n```javascript\nfunction({ctrl : {foo}}){\n    return <div>{foo}</div>\n}\n```\n\n或者\n\n```javascript\nclass Page extends React.Component<Props, States>   {\n    constructor(props: Props) {\n        super(props);\n    }\n    render() {\n        return <div>{this.props.ctrl.foo}</div>\n    }\n};\n```\n#### 使用react-redux组件，但是无法获得controller返回的props\n\n```javascript\nimport { connect } from 'react-redux'\nconst Index = function({some_props}) {\n    return <h1>Wow koa-cola!</h1>\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Index)\n```\n\n或者是经过redux-connect封装的react-redux:\n\n```javascript\nconst {\n    asyncConnect,\n} = require('koa-cola').Decorators.view;\n\n@asyncConnect(\n[{\n    key: 'foo',\n    promise: async ({ params, helpers}) => {\n        return await Promise.resolve('this will go to this.props.some_props')\n    }\n}],\nmapStateToProps,\nmapDispatchToProps\n)\nclass Index extends React.Component<Props, States>   {\n    constructor(props: Props) {\n        super(props);\n    }\n    render() {\n        return <h1>{this.props.foo}</h1>\n    }\n};\nexport default Index\n```\n\nclient端的redux\n\n在client可以使用上面所有形式的react组件的redux数据流开发模式，并且没有server端只能在render前使用的限制，可以在组件的生命周期任何时候使用。\n\n但是client端的redux store会依赖server端，如果server端的store已经经过一系列的数据流操作，那么将会在render阶段之前的数据保存起来，作为client端react-redux的初始化数据（详细查看[redux的createStore](http://redux.js.org/docs/api/createStore.html)），那么这样就可以完美地redux数据流从server端无缝衔接到client端。\n\n### react组件的前后端复用\n\n从前面react-router和react-redux可以看到react组件是可以完全前后端复用，在前端可以使用react所有功能，但是在server端只能使用render之前的生命周期，包括：\n\n* constructor()\n* componentWillMount()\n* render()\n\n如果你的组件会依赖浏览器的dom，如果是在以上生命周期里面调用，则在server端渲染时出错，所以避免出错，你需要判断当前环境，比如：`if(typeof window != 'undefined')`，或者你可以使用这个类似[模拟浏览器端方案](https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md)。\n\n### http api和请求fetch\n\n在前面介绍，也说到过可以使用koa-cola定义的api基类来创建自己的api类，并使用api的fetch方法获取数据：\n\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\n上面代码也是可以兼容server端和服务器端，ajax库使用了[axios](https://github.com/mzabriskie/axios)，比如todolist demo有个react组件定义：\n\n```javascript\n@asyncConnect([\n  {\n    key: 'todosData',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n      const api = new GetTodoList({});\n      const data = await api.fetch(helpers.ctx);\n      return data.result.result;\n    }\n  }\n])\nclass Page extends React.Component<Props, States> {\n  ...\n}\nexport default Page;\n```\n如果该组件的路由是服务器端直接渲染，则`api.fetch`会在服务器端调用，如果该组件是在浏览器端的<Link>跳转，则`api.fetch`会在浏览器端调用。","source":"universal.md","raw":"---\nlayout: default\nid: universal\ntitle: Universal 前后端全栈开发\nprev: compare-next.html\nnext: d-mvc.html\n---\n\n### 前后端router\n\n通过controller生成server端的react-router，并且也生成client端的react-reduxt的Provider(里面还是封装了react-router)\n\n```javascript\n@Controller('') \nclass FooController {\n    @Get('/')\n    @View('index')\n    index(@Ctx() ctx) {\n        return '<h1>hello koa-cola !</h1>'\n    }\n}\n```\n自动生成的server端的react-router:\n\n```html\n<Router ... >\n    <Route path=\"/\" component={IndexComponent} />\n</Router>\n```\n\n通过react-router的match到对应的route后，再通过Provider，最终渲染出html：\n```html\n<Provider store={store} key=\"provider\">\n    <SomeReduxComponent />\n</Provider>\n```\n\n\nclient端Provider则是:\n```html\n<Provider store={store} key=\"provider\">\n    <Router ... >\n        <Route path=\"/\" component={IndexComponent} />\n    </Router>\n</Provider>\n```\n\n### 前后端redux\n\nkoa-cola集成了react-redux方案\n\nserver端redux:\n\n#### controller返回props+普通react组件\n\nreact组件最终会转换成react-redux组件，在生命周期的render之前，你可以使用redux比如dispatch。\n\n```javascript\n@Get('/view')\n@View('some_view')\nasync view( @Ctx() ctx ) { // controller返回数据传递到react组件的props.ctrl\n    return await Promise.resolve({\n        foo : 'bar'\n    });\n} \n```\n\nreact组件：\n\n```javascript\nfunction({ctrl : {foo}}){\n    return <div>{foo}</div>\n}\n```\n\n或者\n\n```javascript\nclass Page extends React.Component<Props, States>   {\n    constructor(props: Props) {\n        super(props);\n    }\n    render() {\n        return <div>{this.props.ctrl.foo}</div>\n    }\n};\n```\n#### 使用react-redux组件，但是无法获得controller返回的props\n\n```javascript\nimport { connect } from 'react-redux'\nconst Index = function({some_props}) {\n    return <h1>Wow koa-cola!</h1>\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Index)\n```\n\n或者是经过redux-connect封装的react-redux:\n\n```javascript\nconst {\n    asyncConnect,\n} = require('koa-cola').Decorators.view;\n\n@asyncConnect(\n[{\n    key: 'foo',\n    promise: async ({ params, helpers}) => {\n        return await Promise.resolve('this will go to this.props.some_props')\n    }\n}],\nmapStateToProps,\nmapDispatchToProps\n)\nclass Index extends React.Component<Props, States>   {\n    constructor(props: Props) {\n        super(props);\n    }\n    render() {\n        return <h1>{this.props.foo}</h1>\n    }\n};\nexport default Index\n```\n\nclient端的redux\n\n在client可以使用上面所有形式的react组件的redux数据流开发模式，并且没有server端只能在render前使用的限制，可以在组件的生命周期任何时候使用。\n\n但是client端的redux store会依赖server端，如果server端的store已经经过一系列的数据流操作，那么将会在render阶段之前的数据保存起来，作为client端react-redux的初始化数据（详细查看[redux的createStore](http://redux.js.org/docs/api/createStore.html)），那么这样就可以完美地redux数据流从server端无缝衔接到client端。\n\n### react组件的前后端复用\n\n从前面react-router和react-redux可以看到react组件是可以完全前后端复用，在前端可以使用react所有功能，但是在server端只能使用render之前的生命周期，包括：\n\n* constructor()\n* componentWillMount()\n* render()\n\n如果你的组件会依赖浏览器的dom，如果是在以上生命周期里面调用，则在server端渲染时出错，所以避免出错，你需要判断当前环境，比如：`if(typeof window != 'undefined')`，或者你可以使用这个类似[模拟浏览器端方案](https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md)。\n\n### http api和请求fetch\n\n在前面介绍，也说到过可以使用koa-cola定义的api基类来创建自己的api类，并使用api的fetch方法获取数据：\n\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\n上面代码也是可以兼容server端和服务器端，ajax库使用了[axios](https://github.com/mzabriskie/axios)，比如todolist demo有个react组件定义：\n\n```javascript\n@asyncConnect([\n  {\n    key: 'todosData',\n    promise: async ({ params, helpers, store: { dispatch } }) => {\n      const api = new GetTodoList({});\n      const data = await api.fetch(helpers.ctx);\n      return data.result.result;\n    }\n  }\n])\nclass Page extends React.Component<Props, States> {\n  ...\n}\nexport default Page;\n```\n如果该组件的路由是服务器端直接渲染，则`api.fetch`会在服务器端调用，如果该组件是在浏览器端的<Link>跳转，则`api.fetch`会在浏览器端调用。","date":"2017-08-18T06:10:20.000Z","updated":"2017-08-18T06:10:20.000Z","path":"universal.html","comments":1,"_id":"cj6hhl3gb000j2mvg192aglt8","content":"<h3>前后端router</h3>\n<p>通过controller生成server端的react-router，并且也生成client端的react-reduxt的Provider(里面还是封装了react-router)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/'</span>)</div><div class=\"line\">    @View(<span class=\"string\">'index'</span>)</div><div class=\"line\">    index(@Ctx() ctx) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello koa-cola !&lt;/h1&gt;'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>自动生成的server端的react-router:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>通过react-router的match到对应的route后，再通过Provider，最终渲染出html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SomeReduxComponent</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>client端Provider则是:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3>前后端redux</h3>\n<p>koa-cola集成了react-redux方案</p>\n<p>server端redux:</p>\n<h4>controller返回props+普通react组件</h4>\n<p>react组件最终会转换成react-redux组件，在生命周期的render之前，你可以使用redux比如dispatch。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Get(<span class=\"string\">'/view'</span>)</div><div class=\"line\">@View(<span class=\"string\">'some_view'</span>)</div><div class=\"line\"><span class=\"keyword\">async</span> view( @Ctx() ctx ) &#123; <span class=\"comment\">// controller返回数据传递到react组件的props.ctrl</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(&#123;</div><div class=\"line\">        foo : <span class=\"string\">'bar'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>react组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;ctrl : &#123;foo&#125;&#125;</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.ctrl.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>使用react-redux组件，但是无法获得controller返回的props</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Wow koa-cola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<p>或者是经过redux-connect封装的react-redux:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    asyncConnect,</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\"></div><div class=\"line\">@asyncConnect(</div><div class=\"line\">[&#123;</div><div class=\"line\">    key: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'this will go to this.props.some_props'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;],</div><div class=\"line\">mapStateToProps,</div><div class=\"line\">mapDispatchToProps</div><div class=\"line\">)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<p>client端的redux</p>\n<p>在client可以使用上面所有形式的react组件的redux数据流开发模式，并且没有server端只能在render前使用的限制，可以在组件的生命周期任何时候使用。</p>\n<p>但是client端的redux store会依赖server端，如果server端的store已经经过一系列的数据流操作，那么将会在render阶段之前的数据保存起来，作为client端react-redux的初始化数据（详细查看<a href=\"http://redux.js.org/docs/api/createStore.html\" target=\"_blank\" rel=\"external\">redux的createStore</a>），那么这样就可以完美地redux数据流从server端无缝衔接到client端。</p>\n<h3>react组件的前后端复用</h3>\n<p>从前面react-router和react-redux可以看到react组件是可以完全前后端复用，在前端可以使用react所有功能，但是在server端只能使用render之前的生命周期，包括：</p>\n<ul>\n<li>constructor()</li>\n<li>componentWillMount()</li>\n<li>render()</li>\n</ul>\n<p>如果你的组件会依赖浏览器的dom，如果是在以上生命周期里面调用，则在server端渲染时出错，所以避免出错，你需要判断当前环境，比如：<code>if(typeof window != 'undefined')</code>，或者你可以使用这个类似<a href=\"https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md\" target=\"_blank\" rel=\"external\">模拟浏览器端方案</a>。</p>\n<h3>http api和请求fetch</h3>\n<p>在前面介绍，也说到过可以使用koa-cola定义的api基类来创建自己的api类，并使用api的fetch方法获取数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p>上面代码也是可以兼容server端和服务器端，ajax库使用了<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios</a>，比如todolist demo有个react组件定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'todosData'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">      <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">      <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Page;</div></pre></td></tr></table></figure>\n<p>如果该组件的路由是服务器端直接渲染，则<code>api.fetch</code>会在服务器端调用，如果该组件是在浏览器端的<link>跳转，则<code>api.fetch</code>会在浏览器端调用。</p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h3>前后端router</h3>\n<p>通过controller生成server端的react-router，并且也生成client端的react-reduxt的Provider(里面还是封装了react-router)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/'</span>)</div><div class=\"line\">    @View(<span class=\"string\">'index'</span>)</div><div class=\"line\">    index(@Ctx() ctx) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello koa-cola !&lt;/h1&gt;'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>自动生成的server端的react-router:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>通过react-router的match到对应的route后，再通过Provider，最终渲染出html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SomeReduxComponent</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>client端Provider则是:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3>前后端redux</h3>\n<p>koa-cola集成了react-redux方案</p>\n<p>server端redux:</p>\n<h4>controller返回props+普通react组件</h4>\n<p>react组件最终会转换成react-redux组件，在生命周期的render之前，你可以使用redux比如dispatch。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Get(<span class=\"string\">'/view'</span>)</div><div class=\"line\">@View(<span class=\"string\">'some_view'</span>)</div><div class=\"line\"><span class=\"keyword\">async</span> view( @Ctx() ctx ) &#123; <span class=\"comment\">// controller返回数据传递到react组件的props.ctrl</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(&#123;</div><div class=\"line\">        foo : <span class=\"string\">'bar'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>react组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;ctrl : &#123;foo&#125;&#125;</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.ctrl.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4>使用react-redux组件，但是无法获得controller返回的props</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Wow koa-cola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<p>或者是经过redux-connect封装的react-redux:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">    asyncConnect,</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>).Decorators.view;</div><div class=\"line\"></div><div class=\"line\">@asyncConnect(</div><div class=\"line\">[&#123;</div><div class=\"line\">    key: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'this will go to this.props.some_props'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;],</div><div class=\"line\">mapStateToProps,</div><div class=\"line\">mapDispatchToProps</div><div class=\"line\">)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<p>client端的redux</p>\n<p>在client可以使用上面所有形式的react组件的redux数据流开发模式，并且没有server端只能在render前使用的限制，可以在组件的生命周期任何时候使用。</p>\n<p>但是client端的redux store会依赖server端，如果server端的store已经经过一系列的数据流操作，那么将会在render阶段之前的数据保存起来，作为client端react-redux的初始化数据（详细查看<a href=\"http://redux.js.org/docs/api/createStore.html\" target=\"_blank\" rel=\"external\">redux的createStore</a>），那么这样就可以完美地redux数据流从server端无缝衔接到client端。</p>\n<h3>react组件的前后端复用</h3>\n<p>从前面react-router和react-redux可以看到react组件是可以完全前后端复用，在前端可以使用react所有功能，但是在server端只能使用render之前的生命周期，包括：</p>\n<ul>\n<li>constructor()</li>\n<li>componentWillMount()</li>\n<li>render()</li>\n</ul>\n<p>如果你的组件会依赖浏览器的dom，如果是在以上生命周期里面调用，则在server端渲染时出错，所以避免出错，你需要判断当前环境，比如：<code>if(typeof window != 'undefined')</code>，或者你可以使用这个类似<a href=\"https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md\" target=\"_blank\" rel=\"external\">模拟浏览器端方案</a>。</p>\n<h3>http api和请求fetch</h3>\n<p>在前面介绍，也说到过可以使用koa-cola定义的api基类来创建自己的api类，并使用api的fetch方法获取数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p>上面代码也是可以兼容server端和服务器端，ajax库使用了<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios</a>，比如todolist demo有个react组件定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">@asyncConnect([</div><div class=\"line\">  &#123;</div><div class=\"line\">    key: <span class=\"string\">'todosData'</span>,</div><div class=\"line\">    promise: <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">      <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">      <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">])</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Page;</div></pre></td></tr></table></figure>\n<p>如果该组件的路由是服务器端直接渲染，则<code>api.fetch</code>会在服务器端调用，如果该组件是在浏览器端的<link>跳转，则<code>api.fetch</code>会在浏览器端调用。</p>\n"},{"layout":"default","id":"views-app","title":"app.tsx","prev":"views-pages.html","next":"views-components.html","_content":"\nviews/app.tsx是浏览器端bundle的webpack入口文件，app.tsx可以手动维护，也可以由ko-cola生成。\n\n你可以手动维护这个文件，手动创建Provider和Router，并提供store：\n\n```javascript\nconst store = ...\n<Provider store={store} key=\"provider\">\n    <Router history={browserHistory}>\n        <Route ... />\n    </Router>\n</Provider>\n```\n\n如果要使用服务器端的redux初始化数据，你需要正确的创建store：\n```javascript\nconst { ReduxAsyncConnect, asyncConnect, reducer } = require(\"koa-cola/dist/client\").Decorators.view;\n// 使用__data 作为redux的初始化数据\nconst store = createStore(combineReducers(Object.assign({ reduxAsyncConnect: reducer }, ...custom_reducer))\n    , (window as any).__data);\n```\n\n如果使用`koa-cola build`来build bundle，那么koa-cola会自动生成app.tsx，所以建议使用koa-cola的生成的方式来维护app.tsx。","source":"views-app.md","raw":"---\nlayout: default\nid: views-app\ntitle: app.tsx\nprev: views-pages.html\nnext: views-components.html\n---\n\nviews/app.tsx是浏览器端bundle的webpack入口文件，app.tsx可以手动维护，也可以由ko-cola生成。\n\n你可以手动维护这个文件，手动创建Provider和Router，并提供store：\n\n```javascript\nconst store = ...\n<Provider store={store} key=\"provider\">\n    <Router history={browserHistory}>\n        <Route ... />\n    </Router>\n</Provider>\n```\n\n如果要使用服务器端的redux初始化数据，你需要正确的创建store：\n```javascript\nconst { ReduxAsyncConnect, asyncConnect, reducer } = require(\"koa-cola/dist/client\").Decorators.view;\n// 使用__data 作为redux的初始化数据\nconst store = createStore(combineReducers(Object.assign({ reduxAsyncConnect: reducer }, ...custom_reducer))\n    , (window as any).__data);\n```\n\n如果使用`koa-cola build`来build bundle，那么koa-cola会自动生成app.tsx，所以建议使用koa-cola的生成的方式来维护app.tsx。","date":"2017-08-18T06:10:19.000Z","updated":"2017-08-18T06:10:19.000Z","path":"views-app.html","comments":1,"_id":"cj6hhl3gc000k2mvgyswx6uvq","content":"<p>views/app.tsx是浏览器端bundle的webpack入口文件，app.tsx可以手动维护，也可以由ko-cola生成。</p>\n<p>你可以手动维护这个文件，手动创建Provider和Router，并提供store：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = ...</div><div class=\"line\">&lt;Provider store=&#123;store&#125; key=<span class=\"string\">\"provider\"</span>&gt;</div><div class=\"line\">    &lt;Router history=&#123;browserHistory&#125;&gt;</div><div class=\"line\">        &lt;Route ... /&gt;</div><div class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>Provider&gt;</div></pre></td></tr></table></figure>\n<p>如果要使用服务器端的redux初始化数据，你需要正确的创建store：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; ReduxAsyncConnect, asyncConnect, reducer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-cola/dist/client\"</span>).Decorators.view;</div><div class=\"line\"><span class=\"comment\">// 使用__data 作为redux的初始化数据</span></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(combineReducers(<span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">reduxAsyncConnect</span>: reducer &#125;, ...custom_reducer))</div><div class=\"line\">    , (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> any).__data);</div></pre></td></tr></table></figure>\n<p>如果使用<code>koa-cola build</code>来build bundle，那么koa-cola会自动生成app.tsx，所以建议使用koa-cola的生成的方式来维护app.tsx。</p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>views/app.tsx是浏览器端bundle的webpack入口文件，app.tsx可以手动维护，也可以由ko-cola生成。</p>\n<p>你可以手动维护这个文件，手动创建Provider和Router，并提供store：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = ...</div><div class=\"line\">&lt;Provider store=&#123;store&#125; key=<span class=\"string\">\"provider\"</span>&gt;</div><div class=\"line\">    &lt;Router history=&#123;browserHistory&#125;&gt;</div><div class=\"line\">        &lt;Route ... /&gt;</div><div class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>Provider&gt;</div></pre></td></tr></table></figure>\n<p>如果要使用服务器端的redux初始化数据，你需要正确的创建store：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; ReduxAsyncConnect, asyncConnect, reducer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-cola/dist/client\"</span>).Decorators.view;</div><div class=\"line\"><span class=\"comment\">// 使用__data 作为redux的初始化数据</span></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(combineReducers(<span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">reduxAsyncConnect</span>: reducer &#125;, ...custom_reducer))</div><div class=\"line\">    , (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> any).__data);</div></pre></td></tr></table></figure>\n<p>如果使用<code>koa-cola build</code>来build bundle，那么koa-cola会自动生成app.tsx，所以建议使用koa-cola的生成的方式来维护app.tsx。</p>\n"},{"layout":"default","id":"views-components","title":"components","prev":"views-app.html","_content":"\nviews/components下放置任何react组件，这个目录不在koa-cola的约定目录里面，意思就是koa-cola项目可以没有这个目录。","source":"views-components.md","raw":"---\nlayout: default\nid: views-components\ntitle: components\nprev: views-app.html\n---\n\nviews/components下放置任何react组件，这个目录不在koa-cola的约定目录里面，意思就是koa-cola项目可以没有这个目录。","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"views-components.html","comments":1,"_id":"cj6hhl3ge000l2mvg3xx79gds","content":"<p>views/components下放置任何react组件，这个目录不在koa-cola的约定目录里面，意思就是koa-cola项目可以没有这个目录。</p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>views/components下放置任何react组件，这个目录不在koa-cola的约定目录里面，意思就是koa-cola项目可以没有这个目录。</p>\n"},{"layout":"default","id":"views-pages","title":"pages","prev":"views.html","next":"views-app.html","_content":"\nviews/pages下的页面page组件是koa-cola路由router配置服务器端html输入模板，浏览器端的react component输入对象。\n\n在controller配置路由的时候配置了view装饰器：\n```javascript\n@Get('/some_page')  \n@View('some_page')\nsome_page () {}\n```\n\n当浏览器访问/some_page时，服务器端koa-cola会选择views/pages/some_page.tsx作为渲染的模板，浏览器端，webpack会把<router>打包到bundle，并且对应的router会配置controller对应的path和page对应的react component。\n\nviews/pages下如果配置了404.tsx或者500.tsx时，如果koa进入对应的异常，则会使用对应的组件进行渲染。\n\nviews/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。\n\n```javascript\nexport default function(html){\n    return `\n    <!doctype html>\n    <html>\n        <body id=\"app\">${html}</body>\n    </html>\n    <script src=\"/bundle.js\"></script>\n        `\n}\n```\n\n服务器端koa-cola在输出html之前会加上store初始化状态在script里面，所以bundle引用需要放在__data之后：\n\n```html\n<!doctype html>\n<html>\n    <body id=\"app\">${html}</body>\n    <script>\n        window.__data= {/*json of redux store*/}\n    </script>\n</html>\n<!-- bundle js根据需要引用，比如默认build到public，或者cdn，或者你也可以修改webpack配置，build按需加载的js或者vendor js等 -->\n<script src=\"/bundle.js\"></script>\n```\n\nreact page组件也支持不使用layout的方式选渲染。\n\n```javascript\nconst {doNotUseLayout} = require('koa-cola/dist/client').Decorators.view;\n@doNotUseLayout\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```\n\n这种情况，你可以使用自定义header和bundle的装饰器：\n\n```javascript\nconst {header, bundle, doNotUseLayout} = require('koa-cola/dist/client').Decorators.view;\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```","source":"views-pages.md","raw":"---\nlayout: default\nid: views-pages\ntitle: pages\nprev: views.html\nnext: views-app.html\n---\n\nviews/pages下的页面page组件是koa-cola路由router配置服务器端html输入模板，浏览器端的react component输入对象。\n\n在controller配置路由的时候配置了view装饰器：\n```javascript\n@Get('/some_page')  \n@View('some_page')\nsome_page () {}\n```\n\n当浏览器访问/some_page时，服务器端koa-cola会选择views/pages/some_page.tsx作为渲染的模板，浏览器端，webpack会把<router>打包到bundle，并且对应的router会配置controller对应的path和page对应的react component。\n\nviews/pages下如果配置了404.tsx或者500.tsx时，如果koa进入对应的异常，则会使用对应的组件进行渲染。\n\nviews/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。\n\n```javascript\nexport default function(html){\n    return `\n    <!doctype html>\n    <html>\n        <body id=\"app\">${html}</body>\n    </html>\n    <script src=\"/bundle.js\"></script>\n        `\n}\n```\n\n服务器端koa-cola在输出html之前会加上store初始化状态在script里面，所以bundle引用需要放在__data之后：\n\n```html\n<!doctype html>\n<html>\n    <body id=\"app\">${html}</body>\n    <script>\n        window.__data= {/*json of redux store*/}\n    </script>\n</html>\n<!-- bundle js根据需要引用，比如默认build到public，或者cdn，或者你也可以修改webpack配置，build按需加载的js或者vendor js等 -->\n<script src=\"/bundle.js\"></script>\n```\n\nreact page组件也支持不使用layout的方式选渲染。\n\n```javascript\nconst {doNotUseLayout} = require('koa-cola/dist/client').Decorators.view;\n@doNotUseLayout\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```\n\n这种情况，你可以使用自定义header和bundle的装饰器：\n\n```javascript\nconst {header, bundle, doNotUseLayout} = require('koa-cola/dist/client').Decorators.view;\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```","date":"2017-08-18T06:10:17.000Z","updated":"2017-08-18T06:10:17.000Z","path":"views-pages.html","comments":1,"_id":"cj6hhl3ge000m2mvgysruum0x","content":"<p>views/pages下的页面page组件是koa-cola路由router配置服务器端html输入模板，浏览器端的react component输入对象。</p>\n<p>在controller配置路由的时候配置了view装饰器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Get(<span class=\"string\">'/some_page'</span>)  </div><div class=\"line\">@View(<span class=\"string\">'some_page'</span>)</div><div class=\"line\">some_page () &#123;&#125;</div></pre></td></tr></table></figure>\n<p>当浏览器访问/some_page时，服务器端koa-cola会选择views/pages/some_page.tsx作为渲染的模板，浏览器端，webpack会把<router>打包到bundle，并且对应的router会配置controller对应的path和page对应的react component。</router></p>\n<p>views/pages下如果配置了404.tsx或者500.tsx时，如果koa进入对应的异常，则会使用对应的组件进行渲染。</p>\n<p>views/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">    &lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;html&gt;</span></div><div class=\"line\"><span class=\"string\">        &lt;body id=\"app\"&gt;<span class=\"subst\">$&#123;html&#125;</span>&lt;/body&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;script src=\"/bundle.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"string\">        `</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端koa-cola在输出html之前会加上store初始化状态在script里面，所以bundle引用需要放在__data之后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>$&#123;html&#125;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.__data= &#123;<span class=\"comment\">/*json of redux store*/</span>&#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- bundle js根据需要引用，比如默认build到public，或者cdn，或者你也可以修改webpack配置，build按需加载的js或者vendor js等 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>react page组件也支持不使用layout的方式选渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.view;</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种情况，你可以使用自定义header和bundle的装饰器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;header, bundle, doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.view;</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">&#125;)</span></div><div class=\"line\">class Page extends React.Component&lt;Props, States&gt;   &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>views/pages下的页面page组件是koa-cola路由router配置服务器端html输入模板，浏览器端的react component输入对象。</p>\n<p>在controller配置路由的时候配置了view装饰器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Get(<span class=\"string\">'/some_page'</span>)  </div><div class=\"line\">@View(<span class=\"string\">'some_page'</span>)</div><div class=\"line\">some_page () &#123;&#125;</div></pre></td></tr></table></figure>\n<p>当浏览器访问/some_page时，服务器端koa-cola会选择views/pages/some_page.tsx作为渲染的模板，浏览器端，webpack会把<router>打包到bundle，并且对应的router会配置controller对应的path和page对应的react component。</router></p>\n<p>views/pages下如果配置了404.tsx或者500.tsx时，如果koa进入对应的异常，则会使用对应的组件进行渲染。</p>\n<p>views/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">    &lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;html&gt;</span></div><div class=\"line\"><span class=\"string\">        &lt;body id=\"app\"&gt;<span class=\"subst\">$&#123;html&#125;</span>&lt;/body&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;script src=\"/bundle.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"string\">        `</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端koa-cola在输出html之前会加上store初始化状态在script里面，所以bundle引用需要放在__data之后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>$&#123;html&#125;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.__data= &#123;<span class=\"comment\">/*json of redux store*/</span>&#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- bundle js根据需要引用，比如默认build到public，或者cdn，或者你也可以修改webpack配置，build按需加载的js或者vendor js等 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>react page组件也支持不使用layout的方式选渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.view;</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种情况，你可以使用自定义header和bundle的装饰器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;header, bundle, doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/dist/client'</span>).Decorators.view;</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">&#125;)</span></div><div class=\"line\">class Page extends React.Component&lt;Props, States&gt;   &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"views","title":"views","prev":"config/env.html","next":"views-pages.html","_content":"\nviews目录是mvc的view层目录，也是放置react组件的目录，在koa-cola react组件分两种：一种是[页面](/doc/views-pages.html)，在views/pages下，另一种是[组件](/doc/views-components.html)，在views/components下。\n\nviews目录下的[app.tsx](/doc/views-app.html)是整个app的bundle入口文件。\n\nviews/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。\n\n","source":"views.md","raw":"---\nlayout: default\nid: views\ntitle: views\nprev: config/env.html\nnext: views-pages.html\n---\n\nviews目录是mvc的view层目录，也是放置react组件的目录，在koa-cola react组件分两种：一种是[页面](/doc/views-pages.html)，在views/pages下，另一种是[组件](/doc/views-components.html)，在views/components下。\n\nviews目录下的[app.tsx](/doc/views-app.html)是整个app的bundle入口文件。\n\nviews/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。\n\n","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"views.html","comments":1,"_id":"cj6hhl3gf000n2mvg711uq00a","content":"<p>views目录是mvc的view层目录，也是放置react组件的目录，在koa-cola react组件分两种：一种是<a href=\"/doc/views-pages.html\">页面</a>，在views/pages下，另一种是<a href=\"/doc/views-components.html\">组件</a>，在views/components下。</p>\n<p>views目录下的<a href=\"/doc/views-app.html\">app.tsx</a>是整个app的bundle入口文件。</p>\n<p>views/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。</p>\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>views目录是mvc的view层目录，也是放置react组件的目录，在koa-cola react组件分两种：一种是<a href=\"/doc/views-pages.html\">页面</a>，在views/pages下，另一种是<a href=\"/doc/views-components.html\">组件</a>，在views/components下。</p>\n<p>views目录下的<a href=\"/doc/views-app.html\">app.tsx</a>是整个app的bundle入口文件。</p>\n<p>views/pages/layout.ts是page最终在服务器端渲染的时候生成的html输入模板，如果没有此文件，则直接输入页面组件的html。</p>\n"},{"_content":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n","source":"css/github-markdown.css","raw":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n","date":"2017-08-17T11:53:13.000Z","updated":"2017-08-17T11:53:13.000Z","path":"css/github-markdown.css","layout":"false","title":"","comments":1,"_id":"cj6hhl3gi000o2mvg5o3pfv3r","content":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n","site":{"data":{"nav":[{"title":"介绍","items":[{"id":"index","title":"koa-cola是什么?"},{"id":"ssr","title":"SSR和SPA"},{"id":"compare-next","title":"对比next.js"},{"id":"universal","title":"Universal 前后端全栈开发"},{"id":"d-mvc","title":"decorator的mvc开发模式"}]},{"title":"使用方法","items":[{"id":"installation","title":"如何使用"},{"id":"cli","title":"Cli命令"}]},{"title":"在线演示","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"todolist例子"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"初始化react组件数据"},{"id":"tip2-redux","title":"redux-connect组件的redux坑"},{"id":"tip3-inject-global","title":"Inject global全局注入"},{"id":"tip4-cluster","title":"cluster集群模式"},{"id":"tip5-debug","title":"调试"},{"id":"tip6-compile","title":"代码编译"}]},{"title":"目录结构","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}